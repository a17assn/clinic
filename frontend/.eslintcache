[{"C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\index.js":"1","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\App.js":"2","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\serviceWorker.js":"3","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\SiderNavigation.js":"4","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\pages\\PatientHomePage.js":"5","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\pages\\Dashboard.js":"6","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\pages\\SMSTextMessaging.js":"7","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\pages\\Payments.js":"8","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\pages\\PatientAccountSettings.js":"9","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\pages\\DentalRecords.js":"10","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\pages\\Appointments.js":"11","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\pages\\UserAccounts.js":"12","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\VisitChart.js":"13","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\register\\RegisterDrawer.js":"14","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\appointments\\PatientCreateAppointmentModal.js":"15","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\appointments\\ApppointmentsCalendar.js":"16","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\appointments\\UpdateContactForm.js":"17","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\appointments\\AppointmentsTable.js":"18","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\sms\\SMSTable.js":"19","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\payments\\PaymentsTable.js":"20","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\user\\UpdateAccountCredentialsForm.js":"21","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\user\\UpdateAccountForm.js":"22","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\DentalRecord\\DentalRecord.js":"23","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\user\\UserAccount.js":"24","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\user\\UserAccountsTable.js":"25","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\DentalRecord\\DentalRecordsTable.js":"26","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\user\\CreateAccountModal.js":"27","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\DentalRecord\\TreatmentsTable.js":"28","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\sms\\SendCustomMessageModal.js":"29","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\dental\\AdultTeethChart.js":"30","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\dental\\ChildTeethChart.js":"31","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\dental\\CreateDentalRecordModal.js":"32","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\appointments\\CreateAppointmentModal.js":"33","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\appointments\\DeclineCancelAppointmentModal.js":"34","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\appointments\\AppointmentsPopoverDrawer.js":"35","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\payments\\PayInstallmentModal.js":"36","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\payments\\InstallmentPaymentsHistoryModal.js":"37","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\treatment\\DMFTPopover.js":"38","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\payments\\AddTreatmentModal.js":"39","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\treatment\\TreatmentsPopoverDrawer.js":"40","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\pages\\Login.js":"41","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\register\\ForgotPasswordModal.js":"42","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\DentalRecord\\DescriptionItem.js":"43","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\DentalRecord\\UpdatePersonalInfoModal.js":"44","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\SpinningComponent.js":"45","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\redux\\index.js":"46","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\redux\\user\\userActions.js":"47","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\redux\\user\\userTypes.js":"48","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\redux\\store.js":"49","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\redux\\rootReducer.js":"50","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\redux\\user\\userReducer.js":"51","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\hocs\\Layout.js":"52"},{"size":451,"mtime":1563090724000,"results":"53","hashOfConfig":"54"},{"size":2446,"mtime":1609775103809,"results":"55","hashOfConfig":"54"},{"size":4948,"mtime":1563090724000,"results":"56","hashOfConfig":"54"},{"size":2258,"mtime":1609776056464,"results":"57","hashOfConfig":"54"},{"size":14186,"mtime":1609774965443,"results":"58","hashOfConfig":"54"},{"size":3444,"mtime":1608933298804,"results":"59","hashOfConfig":"54"},{"size":360,"mtime":1607641742499,"results":"60","hashOfConfig":"54"},{"size":364,"mtime":1607641764270,"results":"61","hashOfConfig":"54"},{"size":2250,"mtime":1608918650899,"results":"62","hashOfConfig":"54"},{"size":726,"mtime":1608929610871,"results":"63","hashOfConfig":"54"},{"size":3313,"mtime":1608918650898,"results":"64","hashOfConfig":"54"},{"size":676,"mtime":1608933343961,"results":"65","hashOfConfig":"54"},{"size":6652,"mtime":1608918650933,"results":"66","hashOfConfig":"54"},{"size":4995,"mtime":1609690158593,"results":"67","hashOfConfig":"54"},{"size":2940,"mtime":1609690425854,"results":"68","hashOfConfig":"54"},{"size":6190,"mtime":1607722836951,"results":"69","hashOfConfig":"54"},{"size":1188,"mtime":1608930512619,"results":"70","hashOfConfig":"54"},{"size":11857,"mtime":1608929426195,"results":"71","hashOfConfig":"54"},{"size":17527,"mtime":1608918650934,"results":"72","hashOfConfig":"54"},{"size":10839,"mtime":1608918650933,"results":"73","hashOfConfig":"54"},{"size":3128,"mtime":1608918650933,"results":"74","hashOfConfig":"54"},{"size":4981,"mtime":1608930111513,"results":"75","hashOfConfig":"54"},{"size":4946,"mtime":1609690913153,"results":"76","hashOfConfig":"54"},{"size":2259,"mtime":1608918650934,"results":"77","hashOfConfig":"54"},{"size":5584,"mtime":1608918650899,"results":"78","hashOfConfig":"54"},{"size":5782,"mtime":1608929675911,"results":"79","hashOfConfig":"54"},{"size":5768,"mtime":1609690552915,"results":"80","hashOfConfig":"54"},{"size":13245,"mtime":1608930586538,"results":"81","hashOfConfig":"54"},{"size":1615,"mtime":1609690531469,"results":"82","hashOfConfig":"54"},{"size":49987,"mtime":1608929445428,"results":"83","hashOfConfig":"54"},{"size":36882,"mtime":1608929447123,"results":"84","hashOfConfig":"54"},{"size":3872,"mtime":1609690350105,"results":"85","hashOfConfig":"54"},{"size":4194,"mtime":1609690792469,"results":"86","hashOfConfig":"54"},{"size":2120,"mtime":1609690398472,"results":"87","hashOfConfig":"54"},{"size":2772,"mtime":1608929349359,"results":"88","hashOfConfig":"54"},{"size":2499,"mtime":1609690482682,"results":"89","hashOfConfig":"54"},{"size":6810,"mtime":1608918650934,"results":"90","hashOfConfig":"54"},{"size":1619,"mtime":1609106533117,"results":"91","hashOfConfig":"54"},{"size":10157,"mtime":1609690465803,"results":"92","hashOfConfig":"54"},{"size":2058,"mtime":1607556473164,"results":"93","hashOfConfig":"54"},{"size":4391,"mtime":1609774731513,"results":"94","hashOfConfig":"54"},{"size":3833,"mtime":1609690507053,"results":"95","hashOfConfig":"54"},{"size":450,"mtime":1609690890249,"results":"96","hashOfConfig":"54"},{"size":3950,"mtime":1609690910633,"results":"97","hashOfConfig":"54"},{"size":466,"mtime":1608929114245,"results":"98","hashOfConfig":"54"},{"size":149,"mtime":1609718494220,"results":"99","hashOfConfig":"54"},{"size":5651,"mtime":1609768461901,"results":"100","hashOfConfig":"54"},{"size":1016,"mtime":1609718440458,"results":"101","hashOfConfig":"54"},{"size":821,"mtime":1609718440270,"results":"102","hashOfConfig":"54"},{"size":180,"mtime":1609718477563,"results":"103","hashOfConfig":"54"},{"size":2018,"mtime":1609718440424,"results":"104","hashOfConfig":"54"},{"size":2301,"mtime":1609776538875,"results":"105","hashOfConfig":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},"18zt6zb",{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"108"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"108"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"108"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"108"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"108"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"108"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"108"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"108"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"108"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"108"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"108"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"108"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"108"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"108"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"108"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"108"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"108"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"108"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"108"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"108"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"108"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"210","messages":"211","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"108"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\index.js",[],["233","234"],"C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\App.js",[],"C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\serviceWorker.js",[],"C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\SiderNavigation.js",[],"C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\pages\\PatientHomePage.js",["235","236","237","238"],"import React,{useState} from 'react';\nimport {Alert, Button, Badge, Layout, Row,Tabs, Col, notification, Typography, Table, Tag, message, Popconfirm} from 'antd';\nimport DescriptionItem from '../components/DentalRecord/DescriptionItem';\nimport axios from 'axios';\nimport moment from 'moment';\nimport PatientCreateAppointmentModal from '../components/appointments/PatientCreateAppointmentModal'\nimport AppointmentsCalendar from '../components/appointments/ApppointmentsCalendar';\nimport UpdateContactForm from '../components/appointments/UpdateContactForm';\n\nconst {TabPane} = Tabs;\nconst {Text, Title} = Typography;\nconst {Content} = Layout;\n\n   function PatientHomePage(props) {\n\n  \n   const [state, setState] = useState({\n      dentalRecord: {},\n      balances: [],\n      myAppointments: [],\n      myAppointmentsLoading: false,\n      confirmedAppointments: []\n   });\n\n\n   // componentDidMount() {\n   //    getDentalRecord(props.user.patient_id);\n   //    getMyBalances(props.user.patient_id);\n   //    getMyAppointments(props.user.patient_id);\n   //    getConfirmedAppointments();\n   // }\n\n   const getDentalRecord = (patientId) => {\n      axios.post(`/api/patients/${patientId}`)\n      .then((response) => {\n         if(response.status === 200)\n            setState({dentalRecord: response.data.patient});\n      })\n      .catch((err) => {\n         console.log(err);\n         message.error('Something went wrong! Please, try again.');\n      });\n   }\n\n   const getMyBalances = (patientId) => {\n      axios.get(`/api/patients/${patientId}/myBalances`)\n      .then((response) => {\n         if(response.status === 200)\n            setState({balances: response.data.balances});\n      })\n      .catch((err) => {\n         console.log(err);\n         message.error('Something went wrong! Please, try again.');\n      });\n   }\n\n   const getMyAppointments = (patientId) => {\n      setState({myAppointmentsLoading: true});\n      axios.get(`/api/patients/${patientId}/myAppointments`)\n      .then((response) => {\n         if(response.status === 200) {\n            setState({myAppointments: response.data.appointments});\n            setTimeout(() => {\n               setState({myAppointmentsLoading: false});\n            }, 800);\n         }\n      })\n      .catch((err) => {\n         console.log(err);\n         message.error('Something went wrong! Please, try again.');\n      });\n   }\n\n   const getConfirmedAppointments = () => {\n      axios.get(`/api/appointments`)\n      .then((response) => {\n         if(response.status === 200) {  \n               setState({confirmedAppointments: response.data.appointments});\n           \n         }\n      })\n      .catch((err) => {\n         console.log(err);\n         message.error('Something went wrong! Please, try again.');\n      });\n   }\n   \n   const handleCreateAppointment = (values) => {\n      values.date_time = values.date_time.format('YYYY-MM-DD HH:mm');\n      axios.post('/api/appointments/create/online', values)\n      .then((response) => {\n         if(response.status === 200) {\n            getMyAppointments(props.user.patient_id);\n            getConfirmedAppointments();\n            if(!state.dentalRecord.contact_number) {\n               notification['warning']({\n                  message: 'No Contact Number Available',\n                  description: 'You have no contact number available! therefore you will not be notified through SMS about your appointment status',\n                  duration: 0\n               });\n               notification['info']({\n                  message: 'Appointment Successfully Created',\n                  description: 'Kindly check the status of appointment here from time to time, since you do not have available Contact Number',\n                  duration: 0\n               });\n            }\n            else {\n               notification['info']({\n                  message: 'Appointment Successfully Created',\n                  description: 'You will be notified through SMS about your appointment status.',\n               });\n            }\n         }\n      })\n      .catch((err) => {\n         console.log(err);\n         message.error('Something went wrong! Please, try again.');\n      });\n      \n   }\n\n   const handleCancelAppointment = (appointmentId) => {\n      axios.post(`/api/patients/${appointmentId}/cancelAppointment`)\n      .then((response) => {\n         if(response.status === 200) {\n            getMyAppointments(props.user.patient_id)\n            getConfirmedAppointments();\n         }\n      })\n      .catch((err) => {\n         console.log(err);\n         message.error('Something went wrong! Please, try again.');\n      });\n   }\n   \n   const handleContactNumberUpdate = (values) => {\n      const hide = message.loading('Updating Contact Number...', 0);\n      axios.post(`/api/patients/${props.user.patient_id}/updateContactNumber`, values)\n      .then((response) => {\n         if(response.status === 200) {\n            hide();\n            message.success('Contact Number Updated Successfully');\n            getDentalRecord(props.user.patient_id);\n         }\n      })\n      .catch((err) => {\n         console.log(err);\n         hide();\n         message.error('Something went wrong! Please, try again.');\n      });\n   }\n\n\n      const balancesColumns = [\n         {\n            title: <Text strong>Date Treated</Text>,\n            dataIndex: 'date_treated',\n            render: (text, record) => {\n               return moment(record.date_treated).format('MMMM DD, YYYY');\n            }\n         },\n         {\n            title: <Text strong>Description</Text>,\n            dataIndex: 'description',\n            render: (text, record) => {\n               return record.description;\n            }\n         }, \n         {\n            title: <Text strong>Balance</Text>,\n            dataIndex: 'balance',\n            render: (text, record) => {\n               return <Tag color=\"red\">{'₱'+record.balance.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</Tag>;\n            }\n         }\n      ];\n\n      const appointmentsColumns = [\n         {\n            title: <Text strong>Date and Time</Text>,\n            dataIndex: 'date_time',\n            render: (text, record) => {\n               return moment(record.date_time).format('MMMM DD, YYYY h:mm A');\n            }\n         },\n         {\n            title: <Text strong>Reason</Text>,\n            dataIndex: 'reason',\n            render: (text, record) => {\n               return record.reason;\n            }\n         },\n         {\n            title: <Text strong>Status</Text>,\n            dataIndex: 'status',\n            render: (text, record) => {\n               return record.status === 'confirmed' ? (<Badge status=\"success\" text={<Text style={{color: '#73d13d'}}>Confirmed</Text>}/>) \n               : record.status === 'pending' ? (    \n                  <Badge status=\"processing\" text={<Text style={{color: '#108ee9'}}>Pending</Text>}/>\n               ) \n               : record.status === 'declined' ? (\n                  (<Badge status=\"error\" text={<Text style={{color: '#ff7875'}}>Declined</Text>}/>)\n               )\n               : (<Badge status=\"error\" text={<Text style={{color: '#ff7875'}}>Cancelled</Text>}/>) \n            }\n         },\n         {\n            title: <Text strong>Action(s)</Text>,\n            dataIndex: 'actions',\n            render: (text, record) => {\n               const isAppointmentPast = moment(record.date_time).format('X') < moment(Date.now()).format('X');\n               const disabled = (record.status === 'cancelled'\n                                    || record.status === 'declined'\n                                    || (record.status === 'pending' && isAppointmentPast)\n                                    || (record.status === 'confirmed' && isAppointmentPast)\n               ) ?  true : false;\n              \n               const cancelDeclineButton = record.status === 'pending' ? (\n                  <Popconfirm title=\"Are you sure?\" okText=\"Yes\" cancelText=\"No\" onConfirm={() => handleCancelAppointment(record.id)}>\n                     <Button disabled={disabled} type=\"danger\">\n                        Cancel Appointment Request\n                     </Button>\n                  </Popconfirm>\n   \n               ) : (\n                  <Popconfirm title=\"Are you sure?\" okText=\"Yes\" cancelText=\"No\" onConfirm={() => handleCancelAppointment(record.id)}>\n                  <Button disabled={disabled} type=\"danger\">\n                     Cancel Appointment\n                  </Button>\n               </Popconfirm>\n               );\n\n               if(record.status === 'declined' || record.status === 'cancelled')\n                  return null;\n             \n               return cancelDeclineButton;\n            }\n         }\n      ];\n      const lastVisit = moment(state.dentalRecord.last_visit).format('MMMM DD, YYYY');\n      const birthday = moment(state.dentalRecord.birthday).format('MMMM DD, YYYY');\n      const age = moment().diff(state.dentalRecord.birthday, 'years');\n      return (\n         <React.Fragment>\n         <Content style={{margin: '24px 24px 24px 36px', padding: 24, background: '#fff'}}>\n            <Title level={4}>HOME</Title>\n            <Tabs tabPosition=\"top\">\n               <TabPane tab=\"My Dental Record Info\" key=\"1\">\n                  <Alert style={{marginBottom: 11}} showIcon message=\"Note: You cannot edit or update any information on your Dental Record here except your contact number. In case of inaccurate information kindly contact us or visit us.\"/>\n                  {!state.dentalRecord.contact_number ? (\n                       <Alert style={{marginBottom: 11}} showIcon closable message=\"You have no provided contact number. Please, kindly provide one to be able to receive sms notifications (appointment reminder, promos, etc.)\" type=\"warning\" /> \n                  ) : null} \n                  <Row type=\"flex\">\n                     <Col span={8}><DescriptionItem title=\"Code\" content={state.dentalRecord.code} /></Col>\n                     <Col span={8}><DescriptionItem title=\"Name\" content={state.dentalRecord.name} /></Col>\n                     <Col span={8}><DescriptionItem title=\"Last Visit\" content={lastVisit} /></Col>\n                     <Col span={8}><DescriptionItem title=\"Birthday\" content={birthday} /></Col>\n                     <Col span={8}><DescriptionItem title=\"Age\" content={age} /></Col>\n                     <Col span={8}><DescriptionItem title=\"Address\" content={state.dentalRecord.address} /></Col>\n                     <Col span={8}><DescriptionItem title=\"Occupation\" content={state.dentalRecord.occupation}/></Col>\n                     <Col span={8}><DescriptionItem title=\"Civil Status\" content={state.dentalRecord.civil_status} /></Col>\n                     <Col span={8}>\n                        <UpdateContactForm onUpdateContactNumber={handleContactNumberUpdate} contactNumber={state.dentalRecord.contact_number} />\n                     </Col>\n                  </Row>\n               </TabPane>\n               <TabPane tab=\"My Balances\" key=\"2\">\n                  <Table\n                     locale={{emptyText: 'No Balances'}}\n                     dataSource={state.balances}\n                     size=\"medium\"\n                     columns={balancesColumns}\n                     rowKey={(record) => record.id}\n                     pagination={\n                        {\n                           position: 'bottom',\n                           showSizeChanger: true,\n                           showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} balances`,\n                           defaultCurrent: 1,\n                           pageSize: 8,\n                           onChange: (page, pageSize) => {\n                           \n                           }\n                        }\n                     }\n                  />\n               </TabPane>\n               <TabPane tab=\"My Appointments\" key=\"3\">\n                  {!state.dentalRecord.contact_number ? (\n                       <Alert style={{marginBottom: 11}} showIcon closable message=\"You have no provided contact number on your Dental Record. Please, kindly provide one to be able to receive sms notifications (appointment reminder, appointment status, etc.)\" type=\"warning\" /> \n                  ) : null} \n                   <Alert \n                     style={{marginBottom: 11}} \n                     showIcon \n                     closable \n                     message={\n                        (<React.Fragment><Text strong>Attention!</Text> Before you make an appoinment, kindly check the clinic's calendar for available time and day otherwise your appointment will be declined or ignored.</React.Fragment>)\n                     } \n                     type=\"warning\" /> \n                  <Row style={{marginBottom: 12}}>\n                     <Col align=\"right\">\n                        {/* <PatientCreateAppointmentModal onCreate={handleCreateAppointment} patientId={props.user.patient_id} /> */}\n                     </Col>\n                  </Row>\n                  <Table\n                     scroll={{x: 700}}\n                     locale={{emptyText: 'No Appointments'}}\n                     loading={state.myAppointmentsLoading}\n                     dataSource={state.myAppointments}\n                     size=\"medium\"\n                     columns={appointmentsColumns}\n                     rowKey={(record) => record.id}\n                     pagination={\n                        {\n                           position: 'bottom',\n                           defaultCurrent: 1,\n                           pageSize: 8,\n                           showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} appointments`,\n                           onChange: (page, pageSize) => {\n\n                           }\n                        }\n                     }\n                  />\n               </TabPane>\n               <TabPane tab=\"Clinic's Appointments Calendar\" key=\"4\">\n                  {/* <AppointmentsCalendar role={props.user.role} appointments={state.confirmedAppointments} />  */}\n               </TabPane>\n            </Tabs>\n   \n         </Content> \n         </React.Fragment>\n      );\n   \n}\n\nexport default PatientHomePage;","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\pages\\Dashboard.js",["239","240","241","242"],"import React, { useState } from 'react';\nimport { Tabs, Card, Row, Col, Layout, Typography, Skeleton } from 'antd';\nimport axios from 'axios';\nimport VisitChart from '../components/VisitChart';\nimport { LineChartOutlined } from '@ant-design/icons';\nimport './dashboard.css';\n\nconst { Title, Text } = Typography;\nconst { Content } = Layout;\n\n\nconst { TabPane } = Tabs;\n\nfunction Dashboard(props) {\n\n   const [state, setState] = useState({\n      today_total_gross_income: NaN,\n      today_total_receivable: NaN,\n      all_total_gross_income: NaN,\n      all_total_receivable: NaN,\n      loading: true\n   });\n\n\n   // componentDidMount() {\n   //    axios.get('dashboard/incomereceivable')\n   //       .then((response) => {\n   //          if (response.status === 200) {\n   //             this.setState(response.data);\n   //             setTimeout(() => {\n   //                this.setState({ loading: false });\n   //             }, 300);\n   //          }\n   //       })\n   //       .catch((err) => {\n   //          console.log(err);\n   //       });\n   // }\n\n\n   // if (this.state.loading)\n   //    return (\n   //       <Content style={{ background: '#FFF', margin: '24px 24px 24px 36px', padding: 21 }}>\n   //          <Skeleton loading={this.state.loading} paragraph={{ rows: 14 }} active />\n   //       </Content>\n   //    );\n\n   return (\n      <Content style={{ margin: '24px 24px 24px 36px' }}>\n         <Row gutter={24} style={{ marginBottom: 24 }}>\n            <Col span={6}>\n               <Card bordered={false}>\n                  <Text type=\"secondary\">Today's Total Gross Income</Text>\n\n                  <Title style={{ fontWeight: 'normal', margin: 0 }} level={2}> {state.today_total_gross_income.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</Title>\n               </Card>\n            </Col>\n            <Col span={6}>\n               <Card bordered={false}>\n                  <Text type=\"secondary\">Today's Total Receivable</Text>\n                  <Title style={{ fontWeight: 'normal', margin: 0 }} level={2}> {state.today_total_receivable.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</Title>\n               </Card>\n            </Col>\n            <Col span={6}>\n               <Card bordered={false}>\n                  <Text type=\"secondary\">Total Gross Income</Text>\n                  <Title style={{ fontWeight: 'normal', margin: 0 }} level={2}>{state.all_total_gross_income.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</Title>\n               </Card>\n            </Col>\n            <Col span={6}>\n               <Card bordered={false}>\n                  <Text type=\"secondary\">Total Receivable</Text>\n                  <Title style={{ fontWeight: 'normal', margin: 0 }} level={2}> {state.all_total_receivable.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</Title>\n               </Card>\n            </Col>\n\n         </Row>\n\n\n         <Row className=\"card-container\">\n\n            <Col style={{ backgroundColor: \"#fff\" }} span={24}>\n               <Tabs defaultActiveKey=\"1\">\n                  <TabPane style={{ marginLeft: 100 }} tab={<Text style={{ fontSize: 18 }}> Visits</Text>} key=\"1\">\n                     <VisitChart />\n                  </TabPane>\n                  {/* <TabPane tab={<Text style={{fontSize: 18}}><LineChartOutlined />  Finances</Text>} key=\"2\">Content of Tab Pane 2</TabPane> */}\n               </Tabs>\n            </Col>\n\n         </Row>\n      </Content>\n   );\n}\n\n\n\nexport default Dashboard;","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\pages\\SMSTextMessaging.js",[],"C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\pages\\Payments.js",[],"C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\pages\\PatientAccountSettings.js",["243"],"import React, { useState } from 'react';\nimport { Layout, Tabs, Typography, message } from 'antd';\nimport UpdateAccountForm from '../components/user/UpdateAccountForm';\nimport UpdateAccountCredentialsForm from '../components/user/UpdateAccountCredentialsForm';\nimport axios from 'axios';\n\nconst { Title } = Typography;\nconst { Content } = Layout;\nconst { TabPane } = Tabs;\n\nfunction PatientAccountSettings(props) {\n   const [state, setState] = useState({\n      account: {}\n   });\n\n\n   // componentDidMount() {\n   //    getUserAccount(props.user.id);\n   // }\n\n   const getUserAccount = (id) => {\n      axios.get(`users/${id}`)\n         .then((response) => {\n            if (response.status === 200)\n               setState({ account: response.data.user });\n         })\n         .catch((err) => {\n            console.log(err);\n            message.error('Something went wrong! Please, try again.');\n         });\n   }\n\n\n   const handleUpdate = (values) => {\n\n      const hide = message.loading('Updating Account...', 0);\n      if (values.birthday)\n         values.birthday = values.birthday.format('YYYY-MM-DD');\n      values.role = state.account.role;\n\n      axios.patch(`users/${state.account.id}/update`, values)\n         .then((response) => {\n            if (response.status === 200) {\n               hide();\n               message.success('Account Updated Successfully');\n            }\n         })\n         .catch((err) => {\n            console.log(err);\n            hide();\n            message.error('Something went wrong! Please, try again.');\n         });\n\n   }\n\n   console.log(state.account);\n   return (\n      <Content style={{ margin: '24px 24px 24px 36px', padding: 24, background: '#fff' }}>\n         <Title level={4}>ACCOUNT SETTINGS</Title>\n         <Tabs tabPosition=\"top\" defaultActiveKey=\"1\">\n            <TabPane tab=\"Personal Info\" key=\"1\">\n               <UpdateAccountForm onUpdate={handleUpdate} account={state.account} />\n            </TabPane>\n            <TabPane tab=\"Account Credentials\" key=\"2\">\n               <UpdateAccountCredentialsForm onUpdate={handleUpdate} account={state.account} />\n            </TabPane>\n         </Tabs>\n      </Content>\n   );\n}\n\n\nexport default PatientAccountSettings;\n\n// account={state.account}","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\pages\\DentalRecords.js",[],"C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\pages\\Appointments.js",["244"],"import React, { useState } from 'react';\nimport { Tabs, Typography, message } from 'antd';\nimport AppointmentsCalendar from '../components/appointments/ApppointmentsCalendar';\nimport AppointmentsTable from '../components/appointments/AppointmentsTable';\nimport { Layout } from 'antd';\nimport axios from 'axios';\n\nconst { Title } = Typography;\nconst { TabPane } = Tabs;\nconst { Content } = Layout;\n\n// class Appointments extends React.Component {\nfunction Appointments(props) {\n\n\n   const [state, setState] = useState({\n      appointmentsTableLoading: true,\n      appointmentsTable: []\n   });\n\n\n   // componentDidMount() {\n   //    getAppointmentsTable();\n   // }\n\n   const getAppointmentsTable = (search = '', dates = []) => {\n      let hide;\n      if (search !== '')\n         hide = message.loading('Searching...', 0);\n      if (dates.length === 2) {\n         setState({ appointmentsTableLoading: true });\n         axios.get(`appointments`, {\n            params: {\n               startDate: dates[0].format('YYYY-MM-DD'),\n               endDate: dates[1].format('YYYY-MM-DD'),\n               search\n            }\n         })\n            .then((response) => {\n               if (response.status === 200) {\n                  setTimeout(() => {\n                     if (search !== '') {\n                        hide();\n                        message.info(`${response.data.appointments.length} appointment(s) found`);\n                     }\n                     setState({ appointmentsTableLoading: false, appointmentsTable: response.data.appointments });\n                  }, 300);\n               }\n            })\n            .catch((err) => {\n               console.log(err);\n               message.error('Something went wrong! Please, try again.');\n            });\n      }\n\n      else {\n         setState({ appointmentsTableLoading: true });\n         axios.get(`appointments`, {\n            params: {\n               search\n            }\n         })\n            .then((response) => {\n               if (response.status === 200) {\n                  setTimeout(() => {\n                     if (search !== '') {\n                        hide();\n                        message.info(`${response.data.appointments.length} appointment(s) found`);\n                     }\n                     setState({ appointmentsTableLoading: false, appointmentsTable: response.data.appointments });\n                  }, 300);\n               }\n            })\n            .catch((err) => {\n               console.log(err);\n               message.error('Something went wrong! Please, try again.');\n            });\n      }\n\n\n   }\n\n   {/* boxShadow: '0px 3px 10px -4px #8c8c8c', padding: 24 */ }\n   return (\n      <Content style={{ margin: '24px 24px 24px 36px', padding: 24, background: '#fff' }}>\n         <Title level={4}>APPOINTMENTS</Title>\n         <Tabs defaultActiveKey=\"1\">\n            <TabPane tab=\"Calendar View\" key=\"2\">\n               <AppointmentsCalendar appointments={state.appointmentsTable} />\n            </TabPane>\n            <TabPane tab=\"Table View\" key=\"1\">\n               <AppointmentsTable tableLoading={state.appointmentsTableLoading} appointments={state.appointmentsTable} getAppointments={getAppointmentsTable} />\n            </TabPane>\n         </Tabs>\n      </Content>\n   );\n\n}\n\n\nexport default Appointments;","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\pages\\UserAccounts.js",[],"C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\VisitChart.js",["245","246"],"import React from 'react';\nimport { DatePicker, Select, Badge, Row, Col, Typography } from 'antd';\nimport moment from 'moment';\nimport axios from 'axios';\n\nimport { Chart, Geom, Axis, Tooltip } from \"bizcharts\";\n\n\nconst { RangePicker } = DatePicker;\nconst { Title } = Typography;\n\nconst getMonthName = (monthNumber) => {\n   switch (monthNumber) {\n      case 1:\n         return \"January\";\n      case 2:\n         return \"February\";\n      case 3:\n         return \"March\";\n      case 4:\n         return \"April\";\n      case 5:\n         return \"May\";\n      case 6:\n         return \"June\";\n      case 7:\n         return \"July\";\n      case 8:\n         return \"August\";\n      case 9:\n         return \"September\";\n      case 10:\n         return \"October\";\n      case 11:\n         return \"November\";\n      case 12:\n         return \"December\";\n   }\n}\n\nconst getDayName = (dayNumber) => {\n   switch (dayNumber) {\n      case 0:\n         return \"Monday\";\n      case 1:\n         return \"Tuesday\";\n      case 2:\n         return \"Wednesday\";\n      case 3:\n         return \"Thursday\";\n      case 4:\n         return \"Friday\";\n      case 5:\n         return \"Saturday\";\n      case 6:\n         return \"Sunday\";\n   }\n}\n\n\nclass VisitChart extends React.Component {\n\n\n   state = {\n      filterBy: 'month',\n      rangeDate: [moment().startOf('year'), moment().endOf('year')],\n      visitsTrend: [],\n      visitsRanking: []\n   };\n\n   componentDidMount() {\n      this.getVisits();\n   }\n\n   getVisits() {\n      axios.get('dashboard/visits', {\n         params: {\n            startDate: moment(this.state.rangeDate[0]).format('YYYY-MM-DD'),\n            endDate: moment(this.state.rangeDate[1]).format('YYYY-MM-DD'),\n            filterBy: this.state.filterBy\n         }\n      })\n         .then((response) => {\n            // if (response.status === 200)\n            // this.setState({ visitsTrend: response.data.visits, visitsRanking: response.data.visitsRanked });\n         })\n         .catch((err) => {\n            console.log(err);\n         });\n   }\n\n   handleSelectChange = async (value) => {\n      await this.setState({ filterBy: value });\n      this.getVisits();\n   }\n\n   handleRangeDateChange = async (dates) => {\n      if (dates.length === 0)\n         await this.setState({\n            rangeDate: [moment().startOf('year'), moment().endOf('year')]\n         });\n      else\n         await this.setState({\n            rangeDate: dates\n         });\n      this.getVisits();\n   }\n\n   render() {\n\n\n      const data = [...this.state.visitsTrend].map((data) => {\n         if (this.state.filterBy === 'month')\n            return {\n               \"name\": getMonthName(data.name),\n               \"Number of Visits\": data[\"Number of Visits\"]\n            };\n         return {\n            \"name\": getDayName(data.name),\n            \"Number of Visits\": data[\"Number of Visits\"]\n         };\n      });\n      console.log('Visits Trend raw', this.state.visitsTrend)\n      console.log(data);\n\n      let previousPosition;\n      let visitsRanking = [...this.state.visitsRanking].map((obj, index, arr) => {\n         if (index !== 0) {\n            if (obj.totalVisits === arr[index - 1].totalVisits) {\n               return {\n                  ...obj,\n                  position: previousPosition\n               }\n            }\n            previousPosition += 1;\n            return {\n               ...obj,\n               position: previousPosition\n            }\n         }\n         previousPosition = 1;\n         return {\n            ...obj,\n            position: previousPosition\n         };\n      });\n\n      const cols = {\n         numberofvisits: {\n            tickInterval: 20\n         }\n      };\n\n      return (\n         <div style={{ padding: '12px 0px 24px 0px' }}>\n            <Row gutter={32}>\n               <Col span={18}>\n                  <Title level={4} style={{ marginLeft: 30, marginTop: 0, fontWeight: 'normal', fontSize: 14 }}>Visits Trend</Title>\n                  <Row>\n                     <Col span={24} align=\"right\">\n                        <Select style={{ marginRight: 12 }} defaultValue=\"month\" onChange={this.handleSelectChange} >\n                           <Select.Option value=\"month\">Month</Select.Option>\n                           <Select.Option value=\"day\">Day</Select.Option>\n                        </Select>\n                        <RangePicker style={{ marginBottom: 8 }} format=\"MMMM DD, YYYY\" defaultPickerValue={[moment().startOf('year'), moment().endOf('year')]} value={this.state.rangeDate} onChange={this.handleRangeDateChange} />\n                     </Col>\n                  </Row>\n                  {/* <Title style={{textAlign: 'center', fontWeight: 'normal', fontSize: 18}}>January 1, 2019 ~ December 31, 2019</Title> */}\n                  <Chart height={400} data={data} scale={cols} forceFit>\n                     <Axis name=\"name\" />\n                     <Axis name=\"Number of Visits\" />\n                     <Tooltip\n                        crosshairs={{\n                           type: \"y\"\n                        }}\n                     />\n                     <Geom type=\"interval\" position=\"name*Number of Visits\" />\n                  </Chart>\n               </Col>\n               <Col span={6}>\n                  <Title level={1} style={{ marginTop: 0, marginBottom: 24, fontWeight: 'normal', fontSize: 14 }}>Visits Ranking</Title>\n\n                  {\n                     visitsRanking.map((obj, index) => {\n                        if (index < 3)\n                           return (\n                              <Row style={{ marginBottom: 12 }}>\n                                 <Col span={24}>\n                                    <Badge count={obj.position} style={{ marginRight: 8, fontWeight: 'bold', backgroundColor: '#314659', color: '#f5f5f5' }} />\n                                    {this.state.filterBy === 'month' ? getMonthName(obj.name) : getDayName(obj.name)}\n                                 </Col>\n                              </Row>\n                           );\n                        return (\n                           <Row style={{ marginBottom: 12 }}>\n                              <Col span={24}>\n                                 <Badge count={obj.position} style={{ marginRight: 8, fontWeight: 'bold', backgroundColor: '#f5f5f5', color: '#595959' }} />\n                                 {this.state.filterBy === 'month' ? getMonthName(obj.name) : getDayName(obj.name)}\n                              </Col>\n                           </Row>\n                        );\n                     })\n                  }\n\n               </Col>\n            </Row>\n\n         </div>\n      );\n   }\n}\n\nexport default VisitChart;","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\register\\RegisterDrawer.js",["247","248","249","250"],"import React, { useState } from 'react';\nimport {\n   Tooltip, Drawer, Form, Button, Col, Row, Input, DatePicker, message, notification\n} from 'antd';\nimport moment from 'moment';\nimport axios from 'axios';\n\n\n\nfunction RegisterDrawer(props) {\n   const [form] = Form.useForm();\n\n   const [state, setState] = useState({\n      visible: false,\n      confirmDirty: false,\n      registerLoading: false\n   });\n\n\n\n   const showDrawer = () => {\n      setState({\n         visible: true,\n      });\n   };\n\n\n   const onClose = () => {\n      setState({\n         visible: false,\n      });\n      form.resetFields()\n   };\n\n   const handleSubmit = (e) => {\n      e.preventDefault();\n\n   }\n\n   const handleRegister = (values) => {\n      setState({ registerLoading: true });\n      values.birthday = values.birthday.format('YYYY-MM-DD');\n      axios.post('auth/users/', values)\n         .then((response) => {\n            if (response.status === 200) {\n               setTimeout(() => {\n                  onClose();\n                  setState({ registerLoading: false });\n                  notification['success']({\n                     message: 'Registration Successful!',\n                     description: 'You can now login through our portal to access services provided to you as a patient',\n                     duration: 5\n                  });\n               }, 1000);\n            }\n         })\n         .catch((err) => {\n            console.log(err);\n            setTimeout(() => {\n               onClose();\n               setState({ registerLoading: false });\n               notification['error']({\n                  message: 'Registration Error!',\n                  description: 'Something went wrong! Please, try again.',\n                  duration: 5\n               });\n            }, 1000);\n         });\n   }\n\n\n   return (\n      <>\n\n         <a onClick={showDrawer} target=\"_blank\" rel=\"noopener noreferrer\">Register</a>\n         <Drawer\n            title=\"Register New Patient Account\"\n            placement=\"right\"\n            width={800}\n            onClose={onClose}\n            visible={state.visible}\n         >\n            <Form onSubmit={handleSubmit}\n               form={form}>\n               <Row gutter={16}>\n                  \n                  <Col span={8}>\n                     <Form.Item label=\"Name\" name=\"name\" rules={[{ required: true, message: 'Name is required' }]}>\n                        <Input />\n                     </Form.Item>\n                  </Col>\n                  <Col span={8}>\n                     <Form.Item label=\"Birthday\" name=\"birthday\" rules={[{ required: true, message: 'Birthday is required' }]}>\n                        <DatePicker disabledDate={(current) => current && current > moment()} format=\"MMMM DD, YYYY\" style={{ width: '100%' }} />\n                     </Form.Item>\n                  </Col>\n                  <Col span={8}>\n                     <Form.Item label=\"Address\" name=\"address\" rules={[{ required: true, message: 'Address is required' }]}>\n                        <Input />\n                     </Form.Item>\n                  </Col>\n                  <Col span={12}>\n                     <Form.Item label=\"Username\" name=\"username\" rules={[{ required: true, message: 'Username is required' }]}>\n                        <Input />\n                     </Form.Item>\n                  </Col>\n                  <Col span={12}>\n\n                     <Form.Item label=\"Email Address\" name=\"emailaddress\" rules={[{ required: true, message: 'Email Address  is required' }]}>\n                        <Input />\n                     </Form.Item>\n                  </Col>\n                  <Col span={12}>\n                     <Form.Item label=\"Password\" name=\"password\" rules={[{ required: true, message: 'Password is required' }]}>\n                        <Input.Password />\n                     </Form.Item>\n                  </Col>\n                  <Col span={12}>\n                     <Form.Item label=\"Confirm Password\" name=\"confirm_password\" rules={[{ required: true, message: 'Please confirm your password' }]}>\n                        <Input.Password />\n                     </Form.Item>\n                  </Col>\n               </Row>\n               <Button hidden htmlType=\"submit\"></Button>\n            </Form>\n            <div\n               style={{\n                  position: 'absolute',\n                  left: 0,\n                  bottom: 0,\n                  width: '100%',\n                  borderTop: '1px solid #e9e9e9',\n                  padding: '10px 16px',\n                  background: '#fff',\n                  textAlign: 'right',\n               }}\n            >\n               <Button onClick={onClose} style={{ marginRight: 8 }}>\n                  Cancel\n                  </Button>\n               <Button onClick={handleSubmit} loading={state.registerLoading} type=\"primary\">\n                  Register\n                  </Button>\n            </div>\n         </Drawer>\n      </>\n   );\n\n}\n\n\nexport default RegisterDrawer;","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\appointments\\PatientCreateAppointmentModal.js",["251","252"],"import React, { useState } from 'react';\nimport { Modal, Form, Input, Row, Col, DatePicker, Button } from 'antd';\n// import axios from 'axios';\nimport moment from 'moment';\n\n// const {Option} = Select;\n\n\n\nfunction PatientCreateAppointmentModal(props) {\n   const [form] = Form.useForm();\n\n   const [state, setState] = useState({\n      visible: false,\n   });\n\n\n\n   const handleSubmit = (e) => {\n      e.preventDefault();\n      props.form.validateFields((err, values) => {\n         if (err)\n            return\n         props.onCreate(values);\n         hideModal();\n      });\n   }\n\n   const showModal = () => {\n      setState({ visible: true });\n   }\n\n   const hideModal = () => {\n      setState({ visible: false });\n      form.resetFields();\n   }\n\n\n   const disabledDateTime = () => {\n      return {\n         disabledHours: () => [0, 1, 2, 3, 4, 5, 6, 7, 18, 19, 20, 21, 22, 23],\n      };\n   }\n\n\n\n\n\n   return (\n      <React.Fragment>\n         <Button onClick={showModal} type=\"primary\">Create New Appointment</Button>\n         <Modal\n            visible={state.visible}\n            title=\"Create a New Appointment\"\n            okText=\"Create\"\n            onCancel={hideModal}\n            onOk={handleSubmit}\n         >\n            <Form layout=\"vertical\" onSubmit={handleSubmit}\n               form={form}>\n               <Row gutter={8}>\n                  <Col span={24}>\n                     <Form.Item label=\"Date and Time\" name=\"date_time\" rules={[{ required: true, message: 'Date and Time is required.' }]}>\n\n                        <DatePicker\n                           disabledTime={disabledDateTime}\n                           disabledDate={(current) => current && current < moment() || moment(current).day() === 0}\n                           placeholder=\"Select date and time\" style={{ width: '100%' }}\n                           showTime={\n                              {\n                                 use12Hours: true, format: 'h:mm',\n                                 defaultValue: moment('8:00', 'h:mm')\n                              }\n                           }\n                           format=\"MMMM DD, YYYY h:mm A\" />\n\n                     </Form.Item>\n                  </Col>\n                  <Col span={24}>\n                     <Form.Item label=\"Reason\" name=\"reason\" rules={[{ required: true, message: 'Reason is required.' }]}>\n\n                        <Input />\n\n                     </Form.Item>\n                  </Col>\n\n                  <Col span={24}>\n                     <Form.Item label=\"Reason\" name=\"reason\" rules={[{ required: true, message: 'Reason is required.' }]} initialValue={props.patientId}>\n\n                        <Input hidden />\n\n                     </Form.Item>\n                  </Col>\n\n\n               </Row>\n               <Button hidden htmlType=\"submit\"></Button>\n            </Form>\n         </Modal>\n      </React.Fragment>\n   );\n\n}\n\nexport default PatientCreateAppointmentModal;","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\appointments\\ApppointmentsCalendar.js",["253","254"],"import React, { useState } from 'react';\nimport { Card, Tag, Typography, BackTop, Calendar, Row, Col, Alert } from 'antd'\nimport AppointmentsPopoverDrawer from './AppointmentsPopoverDrawer';\nimport moment from 'moment';\n\n\nconst { Text } = Typography;\n\nfunction AppointmentsCalendar(props) {\n\n   const [state, setState] = useState({\n      value: moment(Date.now()),\n      visiblePopover: false\n   });\n\n\n\n   const getAppointmentCount = (value) => {\n      const dateValue = moment(value.format('MMMM DD')).unix('X');\n      const data = [...props.appointments];\n      return data.filter((appointment) => {\n         return dateValue === moment(moment(appointment.date_time).format('MMMM DD')).unix('X') && appointment.status === 'confirmed';\n      }).length;\n   }\n\n   const getAppointmentMonthCount = (value) => {\n      const dateValue = moment(value.format('MMMM YYYY')).unix('X');\n      const data = [...props.appointments];\n      return data.filter((appointment) => {\n         return dateValue === moment(moment(appointment.date_time).format('MMMM YYYY')).unix('X') && appointment.status === 'confirmed';\n      }).length;\n   }\n\n   const getAppointmentsDay = (value) => {\n      const dateValue = moment(value.format('MMMM DD')).unix('X');\n      const data = [...props.appointments];\n      return data.filter((appointment) => {\n         return dateValue === moment(moment(appointment.date_time).format('MMMM DD')).unix('X') && appointment.status === 'confirmed';\n      });\n   }\n\n\n   const dateFullCellRender = (date) => {\n      const appointmentCount = getAppointmentCount(date);\n      const startOfMonth = moment(JSON.parse(JSON.stringify(state.value))).startOf('month').unix('X');\n      const endOfMonth = moment(JSON.parse(JSON.stringify(state.value))).endOf('month').unix('X');\n      const isSelected = date.unix('X') === state.value.unix('X');\n\n      if (date.unix('X') < startOfMonth || date.unix('X') > endOfMonth) {\n         return (\n            <div style={{ padding: 4, opacity: 0.5 }}>\n               <Card\n                  title={<Text>{date.format('MMMM DD')}</Text>}\n                  size=\"small\"\n                  style={{ textAlign: 'right', height: 100, cursor: 'pointer', border: 0, boxShadow: '3px 3px 6px -4px #8c8c8c' }}\n               >\n                  {\n                     appointmentCount > 0 ? (\n                        <Tag color=\"red\">{appointmentCount} Appointment(s)</Tag>\n                     ) : (null)\n                  }\n               </Card>\n            </div>\n         );\n      }\n\n\n      return (\n         <div style={{ padding: 4 }}>\n            <AppointmentsPopoverDrawer\n               role={props.role}\n               title={<Text strong>{date.format('MMMM DD')}</Text>}\n               appointments={getAppointmentsDay(date)}\n            >\n               {\n                  isSelected ? (\n                     <Card\n                        title={<Text>{date.format('MMMM DD')}</Text>}\n                        size=\"small\"\n                        style={\n                           {\n                              textAlign: 'right',\n                              backgroundColor: '#e6f7ff',\n                              height: 100,\n                              cursor: 'pointer',\n                              border: 0,\n                              boxShadow: '4px 4px 4px -4px #8c8c8c'\n                           }\n                        }\n                     >\n\n                        {\n                           appointmentCount > 0 ? (\n                              <Tag color=\"red\">{appointmentCount} Appointment(s)</Tag>\n                           ) : (null)\n                        }\n\n                     </Card>\n                  ) : (\n                        <Card\n                           title={<Text>{date.format('MMMM DD')}</Text>}\n                           size=\"small\"\n                           style={\n                              {\n                                 textAlign: 'right',\n                                 height: 100,\n                                 cursor: 'pointer',\n                                 border: '1px solid 8c8c8c',\n                                 boxShadow: '4px 4px 4px -4px #8c8c8c'\n                              }\n                           }\n                        >\n                           {\n                              appointmentCount > 0 ? (\n                                 <Tag style={{ textAlign: 'center' }} color=\"red\">{appointmentCount} Appointment(s)</Tag>\n                              ) : (null)\n                           }\n                        </Card>\n                     )\n               }\n            </AppointmentsPopoverDrawer>\n\n         </div>\n      );\n\n   }\n\n   const hidePopover = () => {\n      setState({ visiblePopover: false });\n   }\n\n   const handleVisiblePopoverChange = (visible) => {\n      setState({ visiblePopover: visible });\n   }\n\n\n   const monthCellRender = (date) => {\n      const appointmentCount = getAppointmentMonthCount(date);\n      return (\n         <Row>\n            <Col align=\"center\">\n               {appointmentCount > 0 ? (\n                  <Tag color=\"red\">{appointmentCount} Appointment(s)</Tag>\n               ) : (null)}\n            </Col>\n         </Row>\n      );\n   }\n\n   const onSelect = (value) => {\n      setState({\n         value\n      });\n   }\n\n   const onPanelChange = (value) => {\n      setState({ value });\n   }\n\n   const { value } = state;\n   return (\n      <React.Fragment>\n         <Row>\n            <BackTop />\n            <Col align=\"left\" span={24}>\n               <Text style={{ margin: '0px 12px 0px 0px' }}>(Today's Date)</Text>\n               <br />\n               <Text strong style={{ fontSize: '21px', margin: '0px 12px 0px 0px' }}>{moment(Date.now()).format('MMMM DD, YYYY')}</Text>\n            </Col>\n         </Row>\n         <Alert message={`You selected date: ${value.format('MMMM DD, YYYY')}`} />\n         <Calendar\n            dateFullCellRender={dateFullCellRender}\n            monthCellRender={monthCellRender}\n            value={value}\n            onSelect={onSelect}\n            onPanelChange={onPanelChange} />\n      </React.Fragment>\n   );\n\n}\n\nexport default AppointmentsCalendar;   ","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\appointments\\UpdateContactForm.js",[],"C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\appointments\\AppointmentsTable.js",["255","256","257"],"import React, { useState } from 'react';\nimport { Modal, message, Menu, Dropdown, Badge, Button, Table, Row, Col, Input, Typography, DatePicker, Radio, Divider } from 'antd';\nimport moment from 'moment';\nimport DeclineCancelAppointmentModal from './DeclineCancelAppointmentModal';\n\nimport CreateAppointmentModal from './CreateAppointmentModal';\nimport axios from 'axios';\n\n\nconst { confirm } = Modal;\nconst { RangePicker } = DatePicker;;\nconst { Search } = Input;\nconst { Text } = Typography;\n\n\nfunction AppointmentsTable(props) {\n\n   const [state, setState] = useState({\n      search: '',\n      selectedFilterBy: '',\n      rangeDate: [],\n   });\n\n\n\n   const handleAppointmentCreate = (values) => {\n      values.date_time = values.date_time.format('YYYY-MM-DD HH:mm');\n      const hide = message.loading('Creating New Appointment...', 0);\n      axios.post('appointments/create/in-person', values)\n         .then((response) => {\n            if (response.status === 200) {\n               hide();\n               message.success('New Appointment Successfully Created');\n               props.getAppointments(state.search, state.rangeDate);\n            }\n         })\n         .catch((err) => {\n            console.log(err);\n            hide();\n            message.error('Something went wrong! Please, try again.');\n         });\n\n   }\n\n   const handleSearchChange = (e) => {\n      const { value } = e.target;\n      setState({ search: value });\n      if (value === '')\n         props.getAppointments(value, state.rangeDate);\n   }\n\n   const handleNoContactNumber = (values) => {\n      confirm({\n         title: `Are you sure to ${values.type} this appointment?!`,\n         content: 'This patient does not have available contact number, therefore will not be notified through SMS.',\n         okText: 'Yes',\n         onOk: () => {\n            handleDeclineCancelAppointment(values);\n         },\n         onCancel() {\n         },\n      });\n   }\n\n   const handleDeclineCancelAppointment = (values) => {\n\n      const hide = message.loading(`${values.type === 'cancel' ? 'Cancelling' : 'Declining'} appointment...`, 0);\n      axios.patch('appointments/decline-cancel', values)\n         .then((response) => {\n            if (response.status === 200) {\n               hide();\n               message.success(`Appointment Successfully ${values.type === 'cancel' ? 'Cancelled' : 'Declined'} `);\n               props.getAppointments(state.search, state.rangeDate);\n            }\n         })\n         .catch((err) => {\n            console.log(err);\n            hide();\n            message.error('Something went wrong! Please, try again.');\n         });\n\n   }\n\n   const handleConfirmAppoinment = (values) => {\n      const hide = message.loading(`Confirming appointment...`, 0);\n      axios.post('appointments/confirm', values)\n         .then((response) => {\n            if (response.status === 200) {\n               hide();\n               message.success(`Appointment Successfully Confirmed`);\n               props.getAppointments(state.search, state.rangeDate);\n            }\n         })\n         .catch((err) => {\n            console.log(err);\n            hide();\n            message.error('Something went wrong! Please, try again.');\n         });\n   }\n\n   const onRadioChange = async (e) => {\n      const { value: filterBy } = e.target;\n      await setState({ selectedFilterBy: filterBy });\n      if (filterBy === 'day')\n         await setState({ rangeDate: [moment(), moment()] });\n      else if (filterBy === 'week')\n         await setState({ rangeDate: [moment().startOf('week'), moment().endOf('week')] });\n      else if (filterBy === 'month')\n         await setState({ rangeDate: [moment().startOf('month'), moment().endOf('month')] });\n      else if (filterBy === 'year')\n         await setState({ rangeDate: [moment().startOf('year'), moment().endOf('year')] });\n      props.getAppointments(state.search, state.rangeDate);\n   }\n\n   const onRangePickerChange = async (dates, dateStrings) => {\n      await setState({ selectedFilterBy: '' });\n      await setState({ rangeDate: dates });\n      props.getAppointments(state.search, state.rangeDate);\n   }\n\n\n   const columns = [\n      {\n         title: <Text strong>Date and Time</Text>,\n         dataIndex: 'date_time',\n         render: (text, record) => {\n            const date = moment(record.date_time).format('MMMM DD, YYYY');\n            const time = moment(record.date_time).format('h:mm A');\n            return (\n               <React.Fragment>\n                  <Text>{date}</Text>\n                  <Divider type=\"vertical\" />\n                  <Text>{time}</Text>\n               </React.Fragment>\n            );\n         }\n      },\n      {\n         title: <Text strong>Patient Name</Text>,\n         dataIndex: 'name',\n         render: (text, record) => {\n            return record.name;\n         }\n      },\n      {\n         title: <Text strong>Reason</Text>,\n         dataIndex: 'reason',\n         render: (text, record) => {\n            return record.reason;\n         }\n      },\n      {\n         title: <Text strong>Status</Text>,\n         dataIndex: 'status',\n         filters: [{\n            text: 'Pending',\n            value: 'pending',\n         }, {\n            text: 'Confirmed',\n            value: 'confirmed',\n         }, {\n            text: 'Cancelled',\n            value: 'cancelled',\n         }, {\n            text: 'Declined',\n            value: 'declined'\n         }],\n         filterMultiple: false,\n         onFilter: (value, record) => {\n            return record.status.indexOf(value) === 0;\n         },\n         render: (text, record) => {\n            return record.status === 'confirmed' ? (<Badge status=\"success\" text={<Text style={{ color: '#73d13d' }}>Confirmed</Text>} />)\n               : record.status === 'pending' ? (\n                  <Badge status=\"processing\" text={<Text style={{ color: '#108ee9' }}>Pending</Text>} />\n               )\n                  : record.status === 'declined' ? (\n                     (<Badge status=\"error\" text={<Text style={{ color: '#ff7875' }}>Declined</Text>} />)\n                  )\n                     : (<Badge status=\"error\" text={<Text style={{ color: '#ff7875' }}>Cancelled</Text>} />)\n         }\n      },\n      {\n         title: <Text strong>Actions</Text>,\n         dataIndex: 'actions',\n         render: (text, record) => {\n\n            const isAppointmentPast = moment(record.date_time).format('X') < moment(Date.now()).format('X');\n            const menu = record.status === 'pending' ? (\n               <Menu>\n                  <Menu.Item>\n                     <a\n                        onClick={() => {\n                           handleConfirmAppoinment({\n                              id: record.id,\n                              date_time: record.date_time,\n                              name: record.name, contact_number:\n                                 record.contact_number\n                           });\n                        }}\n                        target=\"_blank\" rel=\"noopener noreferrer\" >Confirm Appointment</a>\n                  </Menu.Item>\n                  <Menu.Item>\n                     {record.contact_number ? <DeclineCancelAppointmentModal\n                        onDeclineCancel={handleDeclineCancelAppointment}\n                        appointment={{ id: record.id, date_time: record.date_time, name: record.name, contact_number: record.contact_number }} type=\"decline\" />\n                        : <a\n                           onClick={() => handleNoContactNumber({ id: record.id, date_time: record.date_time, name: record.name, contact_number: record.contact_number, type: 'decline' })}\n                           target=\"_blank\" rel=\"noopener noreferrer\">\n                           Decline Appointment\n                                                </a>}\n                  </Menu.Item>\n               </Menu>\n            ) : (\n                  <Menu>\n                     <Menu.Item disabled>\n                        Confirm Appointment\n                     </Menu.Item>\n\n                     {\n                        isAppointmentPast ? (\n                           <Menu.Item disabled>\n                              Cancel Appointment\n                           </Menu.Item>\n                        ) : (\n                              <Menu.Item>\n                                 {record.contact_number ? <DeclineCancelAppointmentModal\n                                    onDeclineCancel={handleDeclineCancelAppointment}\n                                    appointment={{ id: record.id, date_time: record.date_time, name: record.name, contact_number: record.contact_number }} type=\"cancel\" />\n                                    : <a\n                                       onClick={() => handleNoContactNumber({ id: record.id, date_time: record.date_time, name: record.name, contact_number: record.contact_number, type: 'cancel' })}\n                                       target=\"_blank\" rel=\"noopener noreferrer\">\n                                       Cancel Appointment\n                                                            </a>}\n                              </Menu.Item>\n                           )\n                     }\n                  </Menu>\n               );\n\n            const disabledDropdown = (record.status === 'cancelled'\n               || record.status === 'declined'\n               || (record.status === 'pending' && isAppointmentPast)\n               || (record.status === 'confirmed' && isAppointmentPast)\n            ) ? true : false;\n\n            return (\n               <Dropdown disabled={disabledDropdown} overlay={menu} trigger={['click']}>\n                  <Button>\n                     Actions\n                     </Button>\n               </Dropdown>\n            );\n         }\n      }\n   ];\n\n   return (\n      <React.Fragment>\n\n         <Row align=\"middle\" gutter={8}>\n            <Col style={{ marginBottom: 8 }} align=\"right\">\n               <CreateAppointmentModal onCreate={handleAppointmentCreate} />\n            </Col>\n            <Col style={{ marginBottom: 8 }} span={24}>\n               <Search\n                  style={{ width: '100%', zIndex: -999 }}\n                  placeholder=\"search appointment by patient name\"\n                  enterButton\n                  onSearch={(value) => props.getAppointments(value, state.rangeDate)}\n                  onChange={handleSearchChange}\n               />\n            </Col>\n            <Col span={12} align=\"right\">\n               <Radio.Group value={state.selectedFilterBy} onChange={onRadioChange}>\n                  <Radio.Button value=\"day\">All Today</Radio.Button>\n                  <Radio.Button value=\"week\">All Week</Radio.Button>\n                  <Radio.Button value=\"month\">All Month</Radio.Button>\n                  <Radio.Button value=\"year\">All Year</Radio.Button>\n               </Radio.Group>\n            </Col>\n            <Col style={{ marginBottom: 8 }} span={12}>\n               <RangePicker allowClear={true} value={state.rangeDate} format=\"MMMM DD, YYYY\" onChange={onRangePickerChange} style={{ width: '100%' }} />\n            </Col>\n         </Row>\n         <Table\n            loading={props.tableLoading}\n            dataSource={props.appointments}\n            size=\"medium\"\n            columns={columns}\n            scroll={{ x: 300 }}\n            rowKey={(record) => record.id}\n            pagination={\n               {\n                  position: 'both',\n                  defaultCurrent: 1,\n                  pageSize: 8,\n                  showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} appointments`,\n                  onChange: (page, pageSize) => {\n                     props.getAppointments(state.search, state.rangeDate);\n                  }\n               }\n            }\n         />\n      </React.Fragment>\n   );\n\n}\n\n\nexport default AppointmentsTable;","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\sms\\SMSTable.js",[],"C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\payments\\PaymentsTable.js",["258"],"import React,{useState} from 'react';\nimport { Table, message, Row, Col, Radio, Input, DatePicker, Tag, Typography, Button } from 'antd';\nimport moment from 'moment';\nimport axios from 'axios';\nimport jsPDF from 'jspdf';\nimport 'jspdf-autotable';\n\nconst { RangePicker } = DatePicker;\nconst { Search } = Input;\nconst { Title, Text } = Typography;\n\n\nfunction PaymentsTable(props) {\n\n      const [state, setState] = useState({\n         loading: true,\n         paymentTransactions: [],\n         search: '',\n         selectedFilterBy: '',\n         rangeDate: []      \n      });\n\n\n\n      const componentDidMount=()=> {\n      getPaymentTransactions();\n   }\n\n   // paymentTransactions\n\n   const getPaymentTransactions=(search = '', dates = [])=> {\n\n      let hide;\n      if (search !== '')\n         hide = message.loading('Searching...', 0);\n      if (dates.length === 2) {\n         setState({ loading: true });\n         axios.get(`paymentTransactions`, {\n            params: {\n               startDate: dates[0].format('YYYY-MM-DD'),\n               endDate: dates[1].format('YYYY-MM-DD'),\n               search\n            }\n         })\n            .then((response) => {\n               if (response.status === 200) {\n                  setTimeout(() => {\n                     if (search !== '') {\n                        hide();\n                        message.info(`${response.data.paymentTransactions.length} payment(s) found`);\n                     }\n                     setState({ loading: false, paymentTransactions: response.data.paymentTransactions });\n                  }, 300);\n               }\n            })\n            .catch((err) => {\n               console.log(err);\n               message.error('Something went wrong! Please, try again.');\n            });\n      }\n\n      else {\n         setState({ loading: true });\n         axios.get(`paymentTransactions`, {\n            params: {\n               search\n            }\n         })\n            .then((response) => {\n               if (response.status === 200) {\n                  setTimeout(() => {\n                     if (search !== '') {\n                        hide();\n                        message.info(`${response.data.paymentTransactions.length} payment(s) found`);\n                     }\n                     setState({ loading: false, paymentTransactions: response.data.paymentTransactions });\n                  }, 300);\n               }\n            })\n            .catch((err) => {\n               console.log(err);\n               message.error('Something went wrong! Please, try again.');\n            });\n      }\n\n   }\n\n   const handleSearchChange = (e) => {\n      const { value } = e.target;\n      setState({ search: value });\n      if (value === '')\n         getPaymentTransactions(value, state.rangeDate);\n   }\n\n\n   const onRadioChange = async (e) => {\n      const { value: filterBy } = e.target;\n      await setState({ selectedFilterBy: filterBy });\n      if (filterBy === 'day')\n         await setState({ rangeDate: [moment(), moment()] });\n      else if (filterBy === 'week')\n         await setState({ rangeDate: [moment().startOf('week'), moment().endOf('week')] });\n      else if (filterBy === 'month')\n         await setState({ rangeDate: [moment().startOf('month'), moment().endOf('month')] });\n      else if (filterBy === 'year')\n         await setState({ rangeDate: [moment().startOf('year'), moment().endOf('year')] });\n      getPaymentTransactions(state.search, state.rangeDate);\n   }\n\n   const onRangePickerChange = async (dates, dateStrings) => {\n      await setState({ selectedFilterBy: '' });\n      await setState({ rangeDate: dates });\n      getPaymentTransactions(state.search, state.rangeDate);\n   }\n\n   const handlePrint = () => {\n\n      const body = [];\n      let total = 0;\n      state.paymentTransactions.forEach(({ date_paid, amount_paid, payment_type, from, received_by }) => {\n         total += amount_paid;\n         body.push({\n            date_paid: moment(date_paid).format('MMMM DD, YYYY'),\n            amount_paid: amount_paid.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"),\n            payment_type,\n            from,\n            received_by\n         });\n      });\n\n      const doc = new jsPDF({\n         format: [612, 792]\n      });\n      const totalPagesExp = \"{total_pages_count_string}\";\n\n      // Header\n      const pageSize = doc.internal.pageSize;\n      const pageWidth = pageSize.width ? pageSize.width : pageSize.getWidth();\n      const pageHeight = pageSize.height ? pageSize.height : pageSize.getHeight();\n\n      doc.setFontSize(16);\n      doc.setFontStyle('bold');\n      doc.text('Andres Dental Clinic', pageWidth - 68, 10);\n      doc.setFontSize(10);\n      doc.setTextColor(53, 53, 53);\n      doc.setFontStyle('normal');\n      doc.text('One.O.5ive Department Store', pageWidth - 60, 14);\n      doc.text('J. P. Rizal Street, Barangay 18', pageWidth - 62, 18);\n      doc.text('Laoag City, 2900 Ilocos Norte', pageWidth - 60, 22);\n      doc.text('09212451903', pageWidth - 35, 26);\n      doc.setFontSize(14);\n      doc.setTextColor(0, 0, 0);\n      doc.setFontStyle('bold');\n      doc.text('Transaction Log', 15, 32);\n      const [startDate, endDate] = state.rangeDate;\n      doc.setFontStyle('normal');\n      doc.setFontSize(10);\n\n      if (startDate && endDate) {\n         doc.setTextColor(53, 53, 53);\n         doc.text(`(${moment(startDate).format('MMMM DD, YYYY')} - ${moment(endDate).format('MMMM DD, YYYY')})`, 54, 32);\n         doc.setTextColor(0, 0, 0);\n      }\n\n      doc.autoTable({\n         columns: [\n            { header: 'Date Paid', dataKey: 'date_paid' },\n            { header: 'Amount Paid', dataKey: 'amount_paid' },\n            { header: 'Payment Type', dataKey: 'payment_type' },\n            { header: 'From', dataKey: 'from' },\n            { header: 'Received By', dataKey: 'received_by' },\n         ],\n         body,\n         didDrawPage: (data) => {\n            // Footer\n            var str = \"Page \" + doc.internal.getNumberOfPages()\n            // Total page number plugin only available in jspdf v1.0+\n            if (typeof doc.putTotalPages === 'function') {\n               str = str + \" of \" + totalPagesExp;\n            }\n            doc.setFontStyle('normal');\n\n            // jsPDF 1.4+ uses getWidth, <1.4 uses .width\n            doc.text(str, data.settings.margin.left, pageHeight - 10);\n            doc.text(`Generated on ${moment(Date.now()).format('MMMM DD, YYYY hh:mmA')}`, pageWidth - 73, pageHeight - 10);\n\n         },\n         startY: 34,\n         showHead: 'firstPage',\n      });\n\n      doc.line(15, doc.autoTable.previous.finalY + 3, pageWidth - 15, doc.autoTable.previous.finalY + 3); // horizontal line  \n      doc.setFontStyle('bold');\n      doc.text('TOTAL:', 15, doc.autoTable.previous.finalY + 8);\n      doc.text(`${total.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}`, 48, doc.autoTable.previous.finalY + 8);\n      if (typeof doc.putTotalPages === 'function')\n         doc.putTotalPages(totalPagesExp);\n\n      doc.autoPrint();\n      window.open(doc.output('bloburl'), '_blank');\n   }\n\n\n\n      const columns = [\n         {\n            title: <Text strong>Date Paid</Text>,\n            dataIndex: 'date_paid',\n            render: (text, record) => {\n               const display = moment(record.date_paid).format('MMMM DD, YYYY') === moment(Date.now()).format('MMMM DD, YYYY') ? <Tag color=\"geekblue\">Today</Tag>\n                  : moment(record.date_paid).format('MMMM DD, YYYY');\n               return display;\n            }\n         },\n         {\n            title: <Text strong>Amount Paid</Text>,\n            dataIndex: 'amount_paid',\n            render: (text, record) => {\n               return '₱' + record.amount_paid.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            }\n         },\n         {\n            title: <Text strong>Payment Type</Text>,\n            dataIndex: 'payment_type',\n            render: (text, record) => {\n               return record.payment_type.substring(0, 1).toUpperCase() + record.payment_type.substring(1, record.payment_type.length);\n            }\n         },\n         {\n            title: <Text strong>From</Text>,\n            dataIndex: 'from',\n            render: (text, record) => {\n               return record.from;\n            }\n         },\n         {\n            title: <Text strong>Received By</Text>,\n            dataIndex: 'received_by',\n            render: (text, record) => {\n               return record.received_by;\n            }\n         }\n      ];\n\n      return (\n         <React.Fragment>\n            <Title level={4} style={{ margin: 0 }}>TRANSACTION LOG</Title>\n            <Row align=\"middle\" gutter={8}>\n               <Col style={{ marginBottom: 8 }} span={24}>\n                  <Search\n                     style={{ width: '100%', zIndex: -999 }}\n                     placeholder=\"search payment log by patient name\"\n                     enterButton\n                     onSearch={(value) => getPaymentTransactions(value, state.rangeDate)}\n                     onChange={handleSearchChange}\n                  />\n               </Col>\n               <Col span={12} align=\"right\">\n                  <Radio.Group value={state.selectedFilterBy} onChange={onRadioChange}>\n                     <Radio.Button value=\"day\">All Today</Radio.Button>\n                     <Radio.Button value=\"week\">All Week</Radio.Button>\n                     <Radio.Button value=\"month\">All Month</Radio.Button>\n                     <Radio.Button value=\"year\">All Year</Radio.Button>\n                  </Radio.Group>\n               </Col>\n               <Col style={{ marginBottom: 8 }} span={12}>\n                  <RangePicker allowClear={true} value={state.rangeDate} format=\"MMMM DD, YYYY\" onChange={onRangePickerChange} style={{ width: '100%' }} />\n               </Col>\n            </Row>\n            <Row>\n               <Col align=\"right\">\n                  <Button onClick={handlePrint} type=\"primary\"> Print Transaction Log</Button>\n               </Col>\n            </Row>\n            <Table\n               loading={state.loading}\n               dataSource={state.paymentTransactions}\n               size=\"medium\"\n               columns={columns}\n               scroll={{ x: 500 }}\n               rowKey={(record) => record.id}\n               pagination={\n                  {\n                     position: 'both',\n                     showSizeChanger: true,\n                     showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} payments`,\n                     defaultCurrent: 1,\n                     pageSize: 15,\n                     onChange: (page, pageSize) => {\n                        getPaymentTransactions(state.search, state.rangeDate);\n                     }\n                  }\n               }\n            />\n         </React.Fragment>\n      );\n   \n}\n\nexport default PaymentsTable;","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\user\\UpdateAccountCredentialsForm.js",["259","260"],"import React,{useState} from 'react';\nimport { Form, Input, Row, Col, Button, message } from 'antd';\nimport axios from 'axios';\n\n\nfunction UpdateAccountCredentialsForm(props) {\n\n   const handleSubmit = (e) => {\n      e.preventDefault();\n      props.form.validateFields(async (err, values) => {\n         if (err)\n            return\n         await props.onUpdate(values);\n         props.form.setFieldsValue({ password: '' });\n         props.form.setFieldsValue({ confirm_password: '' });\n\n      });\n   }\n\n   const compareToFirstPassword = (rule, value, callback) => {\n      const form = props.form;\n      if (value && value !== form.getFieldValue('password')) {\n         callback('Two passwords that you enter is inconsistent!');\n      }\n      else if (form.getFieldValue('password') && !value) {\n         callback('Please confirm your password');\n      }\n      else {\n         callback();\n      }\n   }\n\n\n   const validateToNextPassword = (rule, value, callback) => {\n      // const form = props.form;\n      // if (value) {\n      // //   form.validateFields(['confirm_password'], { force: true });\n      // }\n      callback();\n   }\n\n   const validateUsername = async (rule, value, callback) => {\n      // const form = props.form;\n      if (value)\n         await axios.post(`users/${value}/validate`)\n            .then((response) => {\n               if (response.status === 200) {\n                  if (!response.data.isValid && response.data.username !== props.account.username)\n                     callback('Username already taken!');\n                  else\n                     callback();\n               }\n            })\n            .catch((err) => {\n               console.log(err);\n               message.error('Internal server error!');\n            });\n      else\n         callback();\n\n   }\n\n   \n      const { account } = props;\n\n      return (\n         <React.Fragment>\n            <Form layout=\"vertical\" onSubmit={handleSubmit}>\n               <Row gutter={8}>\n                  <Col span={24}>\n                     <Form.Item label=\"Username\" initialValue={account.username || ''} name=\"username\" rules={[{ required: true, message: 'Username is required.' }, { validator: validateUsername }]} >\n\n                        <Input />\n\n                     </Form.Item>\n                  </Col>\n                  <Col span={24}>\n                     <Form.Item label=\"New Password\" name=\"username\" rules={[{ required: true, message: 'password is required.' }, { validator: validateToNextPassword }]}>\n\n                        <Input.Password />\n\n                     </Form.Item>\n                  </Col>\n                  <Col span={24}>\n                     <Form.Item label=\"Confirm New Password\" name=\"confirm_password\" rules={[{ required: true, message: 'Please confirm your password' }, { validator: validateToNextPassword }]}>\n\n                        <Input.Password />\n\n                     </Form.Item>\n                  </Col>\n               </Row>\n               <Button htmlType=\"submit\">Update</Button>\n            </Form>\n         </React.Fragment>\n      );\n   \n}\n\nexport default UpdateAccountCredentialsForm;","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\user\\UpdateAccountForm.js",["261","262","263","264"],"import React,{useState} from 'react';\nimport { message, Form, Input, Row, Col, DatePicker, Select, Button } from 'antd';\nimport moment from 'moment';\nimport axios from 'axios';\nconst { Option } = Select;\n\n\n   function UpdateAccountForm(props) {\n\n      const [state, setState] = useState({\n         selectedRole: ''\n      });\n\n\n   const handleSubmit = (e) => {\n      e.preventDefault();\n      props.form.validateFields((err, values) => {\n         if (err)\n            return\n         props.onUpdate(values);\n      });\n   }\n\n   const validateEmailFormat = (email) => {\n      var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n      return re.test(String(email).toLowerCase());\n   }\n\n   const validateEmail = async (rule, value, callback) => {\n      const form = props.form;\n      if (validateEmailFormat(value)) {\n         if (value) {\n            await axios.post(`users/${value}/validateEmail`)\n               .then((response) => {\n                  if (response.status === 200) {\n                     if (!response.data.isValid && response.data.email !== props.account.emailaddress)\n                        callback('Email Address already used!');\n                     else\n                        callback();\n                  }\n               })\n               .catch((err) => {\n                  console.log(err);\n                  message.error('Internal server error!');\n               });\n         }\n      }\n      else if (!validateEmailFormat(value) && value !== '') {\n         callback('Invalid Email Address format')\n      }\n      callback();\n   }\n\n   const handleSelectRoleChange = (value) => {\n      setState({ selectedRole: value });\n   }\n\n      const { account } = props;\n\n      const roleSelect = account.role === 'patient' ? (\n         <Select disabled>\n            <Option value=\"dentalaide\">Dental Aide</Option>\n            <Option value=\"dentist\">Dentist</Option>\n         </Select>\n      ) : (\n            <Select onChange={handleSelectRoleChange}>\n               <Option value=\"dentalaide\">Dental Aide</Option>\n               <Option value=\"dentist\">Dentist</Option>\n            </Select>\n         );\n      return (\n         <React.Fragment>\n            <Form layout=\"vertical\" onSubmit={handleSubmit}>\n               <Row gutter={8}>\n                  <Col span={12}>\n                     <Form.Item label=\"Name\" initialValue={account.name || ''} name=\"name\" rules={[{ required: true, message: 'Name is required.' }]} >\n\n                        <Input />\n\n                     </Form.Item>\n                  </Col>\n                  <Col span={12}>\n                     <Form.Item label=\"Address\" initialValue={account.name || ''} name=\"name\" rules={[{ required: true, message: 'name is required.' }]}>\n\n                        <Input />\n\n                     </Form.Item>\n                  </Col>\n               </Row>\n               <Row gutter={8}>\n                  <Col span={12}>\n                     <Form.Item label=\"Birthday\" initialValue={account.birthday || ''} name=\"birthday\" rules={[{ required: true, message: 'Birthday is required.' }]}>\n\n                        <DatePicker disabledDate={(current) => current && current > moment()} format=\"MMMM DD, YYYY\" style={{ width: '100%' }} />\n\n                     </Form.Item>\n                  </Col>\n                  <Col span={12}>\n                     {\n                        account.role === 'patient' ? (\n                           <Form.Item label=\"Email Address\" initialValue={account.emailaddress || ''} name=\"emailaddress\" rules={[{ required: true, message: 'Email Address is required.' }, { validator: validateEmail }]}>\n\n                              <Input />\n\n                           </Form.Item>\n                        )\n                           : (\n                              <Form.Item label=\"Role\" initialValue={account.role || ''} name=\"role\" rules={[{ required: true, message: 'Role is required.' }]}>\n                                \n                                    roleSelect\n                                \n                              </Form.Item>\n                           )\n                     }\n                  </Col>\n\n                  {(account.role === 'dentist' && state.selectedRole !== 'dentalaide') || state.selectedRole === 'dentist' ? (\n                     <Col span={24}>\n                        <Form.Item label=\"Email Address\" initialValue={account.emailaddress || ''} name=\"emailaddress\" rules={[{ required: true, message: 'Email Address  is required.' }]}>\n                           \n                              <Input />\n                          \n                        </Form.Item>\n                     </Col>\n                  ) : null}\n\n\n               </Row>\n               <Button htmlType=\"submit\">Update</Button>\n            </Form>\n\n         </React.Fragment>\n      );\n   \n}\n\n\nexport default UpdateAccountForm;","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\DentalRecord\\DentalRecord.js",[],"C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\user\\UserAccount.js",["265","266","267","268","269"],"import React, { useState } from 'react';\nimport { Tabs, Row, Col, Icon, message } from 'antd';\nimport { Link } from 'react-router-dom';\nimport UpdateAccountForm from './UpdateAccountForm';\nimport UpdateAccountCredentialsForm from './UpdateAccountCredentialsForm';\nimport axios from 'axios';\nimport { ArrowLeftOutlined } from '@ant-design/icons';\n\n\nconst { TabPane } = Tabs;\n\n\nfunction UserAccount(props) {\n\n   const [state, setState] = useState({\n      account: {}\n   });\n\n   // componentDidMount() {\n   //    this.getUserAccount(this.props.id);\n   // }\n\n   const getUserAccount = (id) => {\n      axios.get(`users/${id}`)\n         .then((response) => {\n            if (response.status === 200)\n               this.setState({ account: response.data.user });\n         })\n         .catch((err) => {\n            console.log(err);\n            message.error('Something went wrong! Please, try again.');\n         });\n   }\n\n\n   const handleUpdate = (values) => {\n\n      const hide = message.loading('Updating Account...', 0);\n      if (values.birthday)\n         values.birthday = values.birthday.format('YYYY-MM-DD');\n\n\n      axios.patch(`users/${this.state.account.id}/update`, values)\n         .then((response) => {\n            if (response.status === 200) {\n               hide();\n               message.success('Account Updated Successfully');\n            }\n         })\n         .catch((err) => {\n            console.log(err);\n            hide();\n            message.error('Something went wrong! Please, try again.');\n         });\n\n   }\n\n   return (\n      <React.Fragment>\n         <Row style={{ marginBottom: 21 }}>\n            <Col align=\"left\">\n               <Link to=\"/useraccounts\"> <ArrowLeftOutlined /> Back to User Accounts</Link>\n            </Col>\n         </Row>\n         <Tabs tabPosition=\"left\" defaultActiveKey=\"1\">\n            <TabPane tab=\"Personal Info\" key=\"1\">\n               <UpdateAccountForm onUpdate={this.handleUpdate} account={this.state.account} />\n            </TabPane>\n            <TabPane tab=\"Account Credentials\" key=\"2\">\n               <UpdateAccountCredentialsForm onUpdate={this.handleUpdate} account={this.state.account} />\n            </TabPane>\n         </Tabs>\n      </React.Fragment>\n   );\n\n\n}\n\nexport default UserAccount;","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\user\\UserAccountsTable.js",[],"C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\DentalRecord\\DentalRecordsTable.js",[],"C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\user\\CreateAccountModal.js",["270","271"],"import React, { useState } from 'react';\nimport { Modal, Form, Input, Row, Col, DatePicker, Select, Button, message } from 'antd';\nimport moment from 'moment';\nimport axios from 'axios';\nimport { UsergroupAddOutlined } from '@ant-design/icons';\n\nconst { Option } = Select;\n\n\n\nfunction CreateAccountModal(props) {\n   const [form] = Form.useForm();\n\n   const [state, setState] = useState({\n      confirmDirty: false,\n      visible: false,\n      selectedRole: ''\n   });\n\n\n   const handleSubmit = (e) => {\n      e.preventDefault();\n      props.form.validateFields((err, values) => {\n         if (err)\n            return\n         props.onCreate(values);\n         hideModal();\n      });\n   }\n\n   const showModal = () => {\n      setState({ visible: true });\n   }\n\n   const hideModal = () => {\n      setState({ visible: false });\n      form.resetFields();\n   }\n\n   const handleConfirmBlur = (e) => {\n      const value = e.target.value;\n      setState({ confirmDirty: state.confirmDirty || !!value });\n   }\n\n   const handleSelectRoleChange = (value) => {\n      setState({ selectedRole: value });\n   }\n\n   const compareToFirstPassword = (rule, value, callback) => {\n      const form = props.form;\n      if (value && value !== form.getFieldValue('password')) {\n         callback('Two passwords that you enter is inconsistent!');\n      } else {\n         callback();\n      }\n   }\n\n\n   const validateToNextPassword = (rule, value, callback) => {\n      const form = props.form;\n      if (value && state.confirmDirty) {\n         form.validateFields(['confirm_password'], { force: true });\n      }\n      callback();\n   }\n\n   const validateUsername = async (rule, value, callback) => {\n      // const form = props.form;\n      if (value)\n         await axios.post(`users/${value}/validate`)\n            .then((response) => {\n               if (response.status === 200) {\n                  console.log(response.data.isValid);\n                  if (!response.data.isValid)\n                     callback('Username already taken!');\n                  else\n                     callback();\n               }\n            })\n            .catch((err) => {\n               console.log(err);\n               message.error('Internal server error!');\n            });\n      else\n         callback();\n\n   }\n\n\n   return (\n      <React.Fragment>\n         <Button type=\"primary\" onClick={showModal}>\n            <UsergroupAddOutlined />\n                  Create New User Account\n               </Button>\n         <Modal\n            visible={state.visible}\n            title=\"Create a New User Account\"\n            okText=\"Create\"\n            onCancel={hideModal}\n            onOk={handleSubmit}\n         >\n            <Form layout=\"vertical\" onSubmit={handleSubmit} form={form}>\n\n               <Row>\n                  <Col span={24}>\n                     <Form.Item label=\"Name\" name=\"name\" rules={[{ required: true, message: 'Name is required.' }]}>\n\n                        <Input />\n\n                     </Form.Item>\n                  </Col>\n               </Row>\n               <Row gutter={8}>\n                  <Col span={12}>\n                     <Form.Item label=\"Address\" name=\"address\" rules={[{ required: true, message: 'Address is required.' }]}>\n\n                        <Input />\n\n                     </Form.Item>\n                  </Col>\n                  <Col span={12}>\n                     <Form.Item label=\"Birthday\" name=\"birthday\" rules={[{ required: true, message: 'Birthday is required.' }]}>\n\n                        <DatePicker disabledDate={(current) => current && current > moment()} format=\"MMMM DD, YYYY\" style={{ width: '100%' }} />\n\n                     </Form.Item>\n                  </Col>\n               </Row>\n\n               <Row gutter={8}>\n                  <Col span={12}>\n                     <Form.Item label=\"Username\" name=\"username\" rules={[{ required: true, message: 'Username is required.' }, { validator: validateUsername }]}>\n\n                        <Input />\n\n                     </Form.Item>\n                  </Col>\n\n                  <Col span={12}>\n                     <Form.Item label=\"Role\" name=\"role\" rules={[{ required: true, message: 'Role is required.' }]} initialValue={'dentalaide'}>\n\n                        <Select onChange={handleSelectRoleChange}>\n                           <Option value=\"dentalaide\">Dental Aide</Option>\n                           <Option value=\"dentist\">Dentist</Option>\n                        </Select>\n\n                     </Form.Item>\n                  </Col>\n               </Row>\n               <Row gutter={8}>\n                  <Col span={12}>\n                     <Form.Item label=\"Password\" name=\"password\" rules={[{ required: true, message: 'Password is required.' }, { validator: validateToNextPassword }]}>\n\n                        <Input.Password />\n\n                     </Form.Item>\n                  </Col>\n                  <Col span={12}>\n                     <Form.Item label=\"Confirm Password\" name=\"confirm_password\" rules={[{ required: true, message: 'Please confirm your password' }, { validator: compareToFirstPassword }]} >\n\n                        <Input.Password />\n\n                     </Form.Item>\n                  </Col>\n\n                  {state.selectedRole === 'dentist' ? (\n                     <Col span={24}>\n                        <Form.Item label=\"Email Address\" name=\"emailaddress\" rules={[{ required: true, message: 'Email Address  is required.' }]}>\n\n                           <Input />\n\n                        </Form.Item>\n                     </Col>\n                  ) : null}\n\n               </Row>\n               <Button hidden htmlType=\"submit\"></Button>\n            </Form>\n         </Modal>\n      </React.Fragment>\n   );\n\n}\n\nexport default CreateAccountModal;","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\DentalRecord\\TreatmentsTable.js",["272","273","274","275"],"import React,{useState} from 'react';\nimport { Row, Col, Table, Dropdown, Menu, Button, message, Tag, Typography, Modal } from 'antd';\nimport axios from 'axios';\nimport moment from 'moment';\n\nimport AddTreatmentModal from '../payments/AddTreatmentModal';\nimport InstallmentPaymentsHistoryModal from '../payments/InstallmentPaymentsHistoryModal';\nimport PayInstallmentModal from '../payments/PayInstallmentModal';\n\nimport jsPDF from 'jspdf';\nimport 'jspdf-autotable';\nimport { DownCircleFilled, PrinterFilled } from '@ant-design/icons';\n\n\nconst { Text } = Typography;\n\nconst balanceStatus = (paymentType, balance) => {\n   if (paymentType === 'in-full')\n      return <Tag color=\"blue\">Fully Paid</Tag>;\n   else if (paymentType === 'no-charge')\n      return <Tag color=\"green\">No Charge</Tag>\n   else if (paymentType === 'installment')\n      return balance === 0 ? <Tag color=\"blue\">Fully Paid</Tag> : <Tag color=\"red\">{'₱' + balance.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</Tag>;\n}\n\n\n\n\nfunction TreatmentsTable(props) {\n\n      const [state, setState] = useState({\n         loading: true,\n      filterByBalance: false,\n      treatments: []\n      });\n\n\n\n   // componentDidMount() {\n   //    getTreatments();\n   // }\n\n   const getTreatments=()=> {\n      setState({ loading: true });\n      axios.get(`treatments/${props.patientId}`)\n         .then((response) => {\n            if (response.status === 200) {\n               setState({ treatments: response.data.treatments });\n               setTimeout(() => {\n                  setState({ loading: false });\n               }, 500);\n            }\n         })\n         .catch((err) => {\n            console.log(err);\n            message.error('Something went wrong! Please, try again.');\n         });\n   }\n\n   const handleAddTreatment = (values) => {\n      const hide = message.loading('Adding New Treatment...', 0);\n      // values.date_treated = values.date_treated.format('YYYY-MM-DD');\n      axios.post(`treatments/${props.patientId}/add`, values)\n         .then((response) => {\n            if (response.status === 200) {\n               hide();\n               message.success('New Treatment Added Sucessfully');\n               getTreatments();\n               props.getPatient();\n            }\n         })\n         .catch((err) => {\n            console.log(err);\n            hide();\n            message.error('Someting went wrong! Please, try again');\n         });\n   }\n\n   const handlePayInstallment = (id, values) => {\n      const hide = message.loading('Processing Payment...', 0);\n      // values.date_paid = values.date_paid.format('YYYY-MM-DD');\n      axios.post(`paymentTransactions/${id}/add`, values)\n         .then((response) => {\n            if (response.status === 200) {\n               hide();\n               message.success('Payment Processed Sucessfully');\n               getTreatments();\n            }\n         })\n         .catch((err) => {\n            console.log(err);\n            hide();\n            message.error('Someting went wrong! Please, try again');\n         });\n   }\n\n   const handleDeleteTreatment = (id) => {\n       Modal.info({\n         title: 'Are you sure?',\n         content: 'Are you sure to delete this treatment? This action cannot be undone.',\n         onOk: () => {\n            const hide = message.loading('Deleting Treatment...', 0);\n            // values.date_paid = values.date_paid.format('YYYY-MM-DD');\n            axios.delete(`treatments/${id}/delete`)\n               .then((response) => {\n                  if (response.status === 200) {\n                     hide();\n                     message.success('Treatment Deleted Sucessfully');\n                     getTreatments();\n                  }\n               })\n               .catch((err) => {\n                  console.log(err);\n                  hide();\n                  message.error('Someting went wrong! Please, try again');\n               });\n         },\n         onCancel() { },\n      });\n   }\n\n\n   // PRINT PAYMENT RECEIPT FOR FULLY PAID TREATMENT\n   const handlePrintPaymentReceipt = (treatment) => {\n      const doc = new jsPDF({\n         format: [612, 792]\n      });\n\n      // const pageSize = doc.internal.pageSize;\n      // const pageWidth = pageSize.width ? pageSize.width : pageSize.getWidth();\n      // const pageHeight = pageSize.height ? pageSize.height : pageSize.getHeight();\n\n      doc.setFontSize(10);\n      doc.setFontStyle('bold');\n      doc.text('Andres Dental Clinic', 15, 10);\n      doc.setFontSize(8);\n      doc.setTextColor(53, 53, 53);\n      doc.setFontStyle('normal');\n      doc.text('One.O.5ive Department Store', 15, 13);\n      doc.text('J. P. Rizal Street, Barangay 18', 15, 16);\n      doc.text('Laoag City, 2900 Ilocos Norte', 15, 19);\n      doc.text('09212451903', 15, 22);\n      doc.setTextColor(0, 0, 0);\n      doc.setFontSize(11);\n      doc.text(`Receipt #: ${treatment.id + '00'}`, 15, 28);\n      doc.text(`Date: ${moment(treatment.date_treated).format('MMMM DD, YYYY')}`, 15, 32);\n      doc.text(`Payment Type: ${treatment.payment_type}`, 15, 36);\n      doc.text(`For: ${treatment.description}`, 15, 40);\n      doc.setFontStyle('bold');\n\n      doc.line(15, 42, 100, 42); // horizontal line \n      doc.text(`Amount Paid: P${treatment.total_amount_to_pay.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}`, 15, 46);\n      doc.line(15, 49, 100, 49); // horizontal line \n\n\n\n\n      doc.autoPrint();\n      window.open(doc.output('bloburl'), '_blank');\n\n   }\n\n   const handleVoidLastPaymentTransaction = (id) => {\n       Modal.info({\n         title: 'Are you sure?',\n         content: 'Are you sure to void the last payment transaction made on this treatment? This action cannot be undone.',\n         onOk: () => {\n            const hide = message.loading('Voiding Last Payment Transaction...', 0);\n            // values.date_paid = values.date_paid.format('YYYY-MM-DD');\n            axios.delete(`treatments/${id}/voidLastPaymentTransaction`)\n               .then((response) => {\n                  if (response.status === 200) {\n                     hide();\n                     message.success('Last Payment Transaction Voided Successfully');\n                     getTreatments();\n                  }\n               })\n               .catch((err) => {\n                  console.log(err);\n                  hide();\n                  message.error('Someting went wrong! Please, try again');\n               });\n         },\n         onCancel() { },\n      });\n   }\n\n      const columns = [\n         {\n            title: <Text strong>Description</Text>,\n            width: 190,\n            fixed: 'left',\n            dataIndex: 'description',\n            render: (text, record) => {\n               return record.description;\n            }\n         },\n         {\n            title: <Text strong>Tooth No</Text>,\n            dataIndex: 'tooth_affected_no',\n            render: (text, record) => {\n               return !record.tooth_affected_no ? 'N/A' : record.tooth_affected_no;\n            }\n         },\n         {\n            title: <Text strong>Date Treated</Text>,\n            dataIndex: 'date_treated',\n            render: (text, record) => {\n               return moment(record.date_treated).format('MMMM DD, YYYY');\n            }\n         },\n         {\n            title: <Text strong>Treated By</Text>,\n            dataIndex: 'treated_by',\n            render: (text, record) => {\n               return record.treated_by;\n            }\n         },\n         {\n            title: <Text strong>Payment Type</Text>,\n            dataIndex: 'payment_type',\n            render: (text, record) => {\n               return record.payment_type.substring(0, 1).toUpperCase() + record.payment_type.substring(1, record.payment_type.length);\n            }\n         },\n         {\n            title: <Text strong>Total Amount To Pay</Text>,\n            dataIndex: 'total_amount_to_pay',\n            render: (text, record) => {\n               return !record.total_amount_to_pay ? '₱' + 0 : '₱' + record.total_amount_to_pay.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            }\n         },\n         {\n            title: <Text strong>Balance</Text>,\n            dataIndex: 'balance',\n            filters: [{\n               text: 'Fully Paid',\n               value: 'fully-paid',\n            }, {\n               text: 'No Charge',\n               value: 'no-charge',\n            }, {\n               text: 'Has Balance',\n               value: 'balance',\n            }],\n            filterMultiple: false,\n            onFilter: (value, record) => {\n               if (value === 'balance')\n                  return record.balance > 0\n               else if (value === 'fully-paid') {\n                  return record.balance === 0;\n               }\n               return !record.balance && record.payment_type === 'no-charge'\n            },\n            render: (text, record) => {\n               return balanceStatus(record.payment_type, record.balance);\n            }\n         },\n         {\n            title: <Text strong>Actions</Text>,\n            width: 80,\n            fixed: 'right',\n            dataIndex: 'actions',\n            render: (text, record) => {\n               console.log(record.transaction_count);\n               if (record.payment_type !== 'installment') {\n                  const fullyPaidMenu = (\n                     <Menu>\n                        <Menu.Item>\n                           <a onClick={() => handlePrintPaymentReceipt(record)} target=\"_blank\" rel=\"noopener noreferrer\"><PrinterFilled />Print Receipt</a>\n                        </Menu.Item>\n                        {\n                           props.role === 'dentist' ? (\n                              <Menu.Item>\n                                 <a onClick={() => handleDeleteTreatment(record.id)} target=\"_blank\" rel=\"noopener noreferrer\">Delete Treatment</a>\n                              </Menu.Item>\n                           ) : (null)\n                        }\n\n                     </Menu>\n                  );\n                  return (\n                     <Dropdown overlay={fullyPaidMenu}>\n                        <Button>\n                           Actions <DownCircleFilled />\n                        </Button>\n                     </Dropdown>\n                  );\n               }\n\n               const disabled = parseInt(record.balance) === 0 ? true : false;\n\n               // INSTALLMENT PAYMENT TYPE ACTIONS\n               const installmentMenu = (\n                  <Menu>\n                     { disabled ? (\n                        <Menu.Item disabled>\n                           <PayInstallmentModal disabled={disabled} treatmentId={record.id} currentBalance={record.balance} onPay={handlePayInstallment} />\n                        </Menu.Item>\n                     ) : (\n                           <Menu.Item>\n                              <PayInstallmentModal disabled={disabled} treatmentId={record.id} currentBalance={record.balance} onPay={handlePayInstallment} />\n                           </Menu.Item>\n                        )}\n\n                     <Menu.Item>\n                        <InstallmentPaymentsHistoryModal treatment={record} treatmentId={record.id} />\n                     </Menu.Item>\n\n                     {props.role === 'dentist' && record.transaction_count === 1 ? (\n                        <Menu.Item>\n                           <a onClick={() => handleDeleteTreatment(record.id)} target=\"_blank\" rel=\"noopener noreferrer\">Delete Treatment</a>\n                        </Menu.Item>\n                     ) : props.role === 'dentist' && record.transaction_count > 1 ? (\n                        <Menu.Item>\n                           <a onClick={() => handleVoidLastPaymentTransaction(record.id)} target=\"_blank\" rel=\"noopener noreferrer\">Void Last Payment Transaction</a>\n                        </Menu.Item>\n                     ) : (null)}\n                  </Menu>\n               );\n\n               return (\n                  <Dropdown overlay={installmentMenu} trigger={['click']}>\n                     <Button>\n                        Actions <DownCircleFilled />\n                     </Button>\n                  </Dropdown>\n               );\n            }\n         }\n      ];\n\n      return (\n         <React.Fragment>\n            <Row align=\"bottom\" style={{ marginTop: 8, marginBottom: 8 }}>\n               <Col style={{ marginBottom: 8 }} span={24} align=\"right\">\n                  <AddTreatmentModal onAdd={handleAddTreatment} />\n               </Col>\n            </Row>\n\n            <Table\n               loading={state.loading}\n               dataSource={state.treatments}\n               size=\"medium\"\n               columns={columns}\n               scroll={{ x: 1000 }}\n               rowKey={(record) => record.id}\n               pagination={\n                  {\n                     position: 'both',\n                     showSizeChanger: true,\n                     showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} treatments`,\n                     defaultCurrent: 1,\n                     pageSize: 8,\n                     onChange: (page, pageSize) => {\n\n                     }\n                  }\n               }\n            />\n         </React.Fragment>\n      );\n   }\n \n\nexport default TreatmentsTable;","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\sms\\SendCustomMessageModal.js",[],"C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\dental\\AdultTeethChart.js",[],"C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\dental\\ChildTeethChart.js",[],"C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\dental\\CreateDentalRecordModal.js",[],"C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\appointments\\CreateAppointmentModal.js",["276","277","278","279"],"import React, { useState } from 'react';\nimport { message, Modal, Form, Input, Row, Col, DatePicker, Select, Button } from 'antd';\nimport axios from 'axios';\nimport moment from 'moment';\nimport { PlusCircleFilled } from '@ant-design/icons';\n\nconst { Option } = Select;\n\n\n\nfunction CreateAppointmentModal(props) {\n   const [form] = Form.useForm();\n\n   const [state, setState] = useState({\n      visible: false,\n      searchPatientInputData: []\n   });\n\n\n\n   const handleSearch = (value) => {\n      // ajax stuff\n      axios.get('patients', {\n         params: { search: value }\n      })\n         .then((response) => {\n            if (response.status === 200)\n               setState({ searchPatientInputData: response.data.patients });\n         })\n         .catch((err) => {\n            console.log(err);\n            message.error('Something went wrong! Please, try again.');\n         });\n   }\n\n   const handleSearchChange = (value) => {\n      props.form.setFieldsValue({ patient_id: value });\n   }\n\n\n   const handleSubmit = (e) => {\n      e.preventDefault();\n      props.form.validateFields((err, values) => {\n         if (err)\n            return\n         props.onCreate(values);\n         hideModal();\n      });\n   }\n\n   const showModal = () => {\n      setState({ visible: true });\n   }\n\n   const hideModal = () => {\n      setState({ visible: false });\n      form.resetFields();\n   }\n\n\n   const disabledDateTime = () => {\n      return {\n         disabledHours: () => [0, 1, 2, 3, 4, 5, 6, 7, 18, 19, 20, 21, 22, 23],\n      };\n   }\n\n\n\n\n   // const options = state.searchPatientInputData.map(d => <Option key={d.id}>{d.name}</Option>)\n\n   return (\n      <React.Fragment>\n         <Button onClick={showModal} type=\"primary\"><PlusCircleFilled />Create New Appointment</Button>\n         <Modal\n            visible={state.visible}\n            title=\"Create a New Appointment\"\n            okText=\"Create\"\n            onCancel={hideModal}\n            onOk={handleSubmit}\n         >\n            <Form layout=\"vertical\" onSubmit={handleSubmit}\n               form={form}>\n               <Row gutter={8}>\n                  <Col span={24}>\n                     <Form.Item label=\"Date and Time\" name=\"date_time\" rules={[{ required: true, message: 'Date and Time is required.' }]} >\n\n\n                        <DatePicker\n                           disabledTime={disabledDateTime}\n                           disabledDate={(current) => current && current < moment() || moment(current).day() === 0}\n                           placeholder=\"Select date and time\" style={{ width: '100%' }}\n                           showTime={\n                              {\n                                 use12Hours: true, format: 'h:mm',\n                                 defaultValue: moment('8:00', 'h:mm')\n                              }\n                           }\n                           format=\"MMMM DD, YYYY h:mm A\" />\n\n                     </Form.Item>\n                  </Col>\n                  <Col span={24}>\n                     <Form.Item label=\"Patient Name\" name=\"patient_id\" rules={[{ required: true, message: 'Patient name is required' }]}>\n\n                        <Select\n                           allowClear\n                           showSearch\n                           placeholder=\"\"\n                           defaultActiveFirstOption={false}\n                           showArrow={false}\n                           filterOption={false}\n                           onSearch={handleSearch}\n                           // onChange={handleChange}\n                           notFoundContent={null}\n                        >\n                           {/* {options} */}\n                        </Select>\n\n                     </Form.Item>\n                  </Col>\n                  <Col span={24}>\n                     <Form.Item label=\"Reason\" name=\"reason\" rules={[{ required: true, message: 'Reason is required.' }]}>\n\n                        <Input />\n\n                     </Form.Item>\n                  </Col>\n               </Row>\n               <Button hidden htmlType=\"submit\"></Button>\n            </Form>\n         </Modal>\n      </React.Fragment>\n   );\n\n}\n\nexport default CreateAppointmentModal;","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\appointments\\DeclineCancelAppointmentModal.js",["280"],"import React, { useState } from 'react';\nimport { Modal, Form, Row, Col, Button, Input } from 'antd';\n// import moment from 'moment';\n\n\n\nfunction DeclineCancelAppointmentModal(props) {\n   const [form] = Form.useForm();\n\n   const [state, setState] = useState({\n      visible: false\n   });\n\n\n   const handleSubmit = (e) => {\n      e.preventDefault();\n      props.form.validateFields((err, values) => {\n         if (err)\n            return\n         props.onDeclineCancel({\n            id: props.appointment.id,\n            date_time: props.appointment.date_time,\n            name: props.appointment.name,\n            contact_number: props.appointment.contact_number,\n            type: props.type,\n            reasonMessage: values.message\n         });\n         hideModal();\n      });\n   }\n\n   const showModal = () => {\n      setState({ visible: true });\n   }\n\n   const hideModal = () => {\n      setState({ visible: false });\n      form.resetFields();\n   }\n\n\n   const title = props.type === 'decline' ? 'Appointment Decline Reason SMS' : 'Appointment Cancellation Reason SMS';\n   const buttonText = props.type === 'decline' ? 'Decline Appointment' : 'Cancel Appointment';\n   return (\n      <React.Fragment>\n         <a disabled={props.disabled} onClick={showModal} target=\"_blank\" rel=\"noopener noreferrer\">{buttonText}</a>\n\n         <Modal\n            visible={state.visible}\n            title={title}\n            okText=\"Send\"\n            onCancel={hideModal}\n            onOk={handleSubmit}\n         >\n            <Form layout=\"vertical\" onSubmit={handleSubmit}\n               form={form}>\n               <Row gutter={8}>\n                  <Col span={24}>\n                     <Form.Item label=\"Message\" name=\"message\" rules={[{ required: true, message: 'Message is required' }]} >\n\n                        <Input.TextArea autosize={{ minRows: 8, maxRows: 8 }} />\n\n                     </Form.Item>\n                  </Col>\n               </Row>\n               <Button hidden htmlType=\"submit\"></Button>\n            </Form>\n         </Modal>\n      </React.Fragment>\n   );\n\n}\n\nexport default DeclineCancelAppointmentModal;","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\appointments\\AppointmentsPopoverDrawer.js",["281","282","283"],"import React, { useState } from 'react';\nimport { Divider, Timeline, Popover, Drawer, } from 'antd';\nimport moment from 'moment';\n\nfunction AppointmentsPopoverDrawer(props) {\n\n   const [state, setState] = useState({\n      visible: false, childrenDrawer: false, visiblePopover: false\n   });\n\n\n   const showDrawer = () => {\n      setState({\n         visible: true,\n         visiblePopover: false\n      });\n   };\n\n   const onClose = () => {\n      setState({\n         visible: false,\n         visiblePopover: false\n      });\n   };\n\n   const showChildrenDrawer = () => {\n\n      setState({\n         childrenDrawer: true,\n      });\n   };\n\n   const onChildrenDrawerClose = () => {\n      setState({\n         childrenDrawer: false,\n      });\n   };\n\n   const handleVisiblePopoverChange = (visible) => {\n      setState({ visiblePopover: visible });\n   }\n\n\n   return (\n      <React.Fragment>\n         <Popover\n            title={props.title}\n            trigger=\"click\"\n            visible={state.visiblePopover}\n            onVisibleChange={handleVisiblePopoverChange}\n            content={<a onClick={showDrawer}>View Appointments</a>}\n         >\n            {props.children}\n         </Popover>\n         <Drawer\n            title=\"Appointments for this date\"\n            width=\"450px\"\n            closable={true}\n            onClose={onClose}\n            visible={state.visible}\n         >\n            <Timeline>\n               {\n                  props.appointments.map((appointment) => {\n\n                     if (props.role === 'patient')\n                        return (\n                           <Timeline.Item>\n                              <Divider type=\"vertical\" /> {appointment.reason} @ {moment(appointment.date_time).format('h:mm A')}\n                           </Timeline.Item>\n                        );\n                     return (\n                        <Timeline.Item>\n                           {appointment.name} @ {moment(appointment.date_time).format('h:mm A')} <Divider type=\"vertical\" /> {appointment.reason}\n                        </Timeline.Item>\n                     );\n                  })\n               }\n            </Timeline>\n            {/* SECOND LEVEL DAWER*/}\n            {/* <Button type=\"primary\" onClick={showChildrenDrawer}>\n                  Two-level drawer\n               </Button>\n               <Drawer\n                  title=\"Two-level Drawer\"\n                  width={320}\n                  closable={true}\n                  onClose={onChildrenDrawerClose}\n                  visible={state.childrenDrawer}\n               >\n                  This is two-level drawer\n               </Drawer> */}\n            {/* SECOND LEVEL DAWER*/}\n\n\n         </Drawer>\n      </React.Fragment>\n   );\n\n}\n\n\nexport default AppointmentsPopoverDrawer;","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\payments\\PayInstallmentModal.js",["284","285"],"import React, { useState } from 'react';\nimport { Modal, Form, InputNumber, Row, Col, Button } from 'antd';\n// import moment from 'moment';\n\nfunction PayInstallmentModal(props) {\n   const [form] = Form.useForm();\n\n   const [state, setState] = useState({\n      visible: false\n   });\n\n\n\n   const handleSubmit = (e) => {\n      e.preventDefault();\n      props.form.validateFields((err, values) => {\n         if (err)\n            return\n         values.current_balance_before = parseInt(props.currentBalance);\n         props.onPay(props.treatmentId, values);\n         hideModal();\n      });\n   }\n\n\n   const showModal = () => {\n      setState({ visible: true });\n   }\n\n   const hideModal = () => {\n      setState({ visible: false });\n      form.resetFields();\n   }\n\n   const checkBalance = (rule, value, callback) => {\n      const { currentBalance } = props;;\n      if ((value > currentBalance) || (value < 1 && currentBalance))\n         callback('Cannot be lower or greater than current balance');\n      else\n         callback();\n   }\n\n\n   return (\n      <React.Fragment>\n         <a disabled={props.disabled} onClick={showModal} target=\"_blank\" rel=\"noopener noreferrer\">Pay Installment</a>\n         <Modal\n            visible={state.visible}\n            title=\"Pay Installment\"\n            okText=\"Pay\"\n            onCancel={hideModal}\n            onOk={handleSubmit}\n         >\n            <Form layout=\"vertical\" onSubmit={handleSubmit} form={form}>\n\n               <Row gutter={8}>\n                  <Col span={24}>\n                     <Form.Item label=\"Amount Paid\" name=\"amount_paid\" rules={[{ required: true, message: 'Amount Paid is required' }]}>\n\n                        <InputNumber style={{ width: '100%' }} min={1} />\n\n                     </Form.Item>\n                  </Col>\n                  {/* <Col span={12}>\n                        <Form.Item label=\"Date Paid\">\n                           {getFieldDecorator('date_paid', {\n                              rules: [{ required: true, message: 'Date Paid is required.' }],\n                           })(\n                           <DatePicker disabledDate={(current) => current && current > moment()} format=\"MMMM DD, YYYY\" style={{width: '100%'}} />\n                           )}\n                        </Form.Item>\n                     </Col> */}\n               </Row>\n               <Button hidden htmlType=\"submit\"></Button>\n            </Form>\n         </Modal>\n      </React.Fragment>\n   );\n\n}\n\nexport default PayInstallmentModal;","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\payments\\InstallmentPaymentsHistoryModal.js",["286"],"import React,{useState} from 'react';\nimport { Modal, Table, message, Button } from 'antd';\nimport axios from 'axios';\nimport moment from 'moment';\nimport { Typography } from 'antd';\nimport jsPDF from 'jspdf';\nimport 'jspdf-autotable';\nimport { PrinterFilled } from '@ant-design/icons';\nimport { CloseCircleFilled } from '@ant-design/icons';\n\nconst { Text } = Typography;\n\n\nfunction InstallmentPaymentsHistoryModal(props) {\n\n      const [state, setState] = useState({\n         loading: true,\n         visible: false,\n         paymentTransactions: []      \n      });\n\n \n\n   // componentDidMount() {\n   //    getPaymentTransactions();\n   // }\n\n   const getPaymentTransactions=()=> {\n      setState({ loading: true });\n      axios.get(`paymentTransactions/${props.treatmentId}`)\n         .then((response) => {\n            if (response.status === 200) {\n               setState({ paymentTransactions: response.data.paymentTransactions });\n               setTimeout(() => {\n                  setState({ loading: false });\n               }, 500);\n            }\n         })\n         .catch((err) => {\n            console.log(err);\n            message.error('Something went wrong! Please, try again.');\n         });\n   }\n\n   const showModal = () => {\n      getPaymentTransactions();\n      setState({ visible: true });\n   }\n\n   const hideModal = () => {\n      setState({ visible: false });\n   }\n\n\n   const handlePrintPaymentReceipt = (details) => {\n      console.log(details);\n      const doc = new jsPDF({\n         format: [612, 792]\n      });\n\n      // const pageSize = doc.internal.pageSize;\n      // const pageWidth = pageSize.width ? pageSize.width : pageSize.getWidth();\n      // const pageHeight = pageSize.height ? pageSize.height : pageSize.getHeight();\n\n      doc.setFontSize(10);\n      doc.setFontStyle('bold');\n      doc.text('Andres Dental Clinic', 15, 10);\n      doc.setFontSize(8);\n      doc.setTextColor(53, 53, 53);\n      doc.setFontStyle('normal');\n      doc.text('One.O.5ive Department Store', 15, 13);\n      doc.text('J. P. Rizal Street, Barangay 18', 15, 16);\n      doc.text('Laoag City, 2900 Ilocos Norte', 15, 19);\n      doc.text('09212451903', 15, 22);\n      doc.setTextColor(0, 0, 0);\n      doc.setFontSize(11);\n      doc.text(`Receipt #: ${details.id + '00'}`, 15, 28);\n      doc.text(`Date: ${moment(details.date_paid).format('MMMM DD, YYYY')}`, 15, 32);\n      doc.text(`Payment Type: ${details.payment_type}`, 15, 36);\n      doc.text(`For: ${details.description}`, 15, 40);\n      doc.setFontStyle('bold');\n\n      doc.line(15, 42, 100, 42); // horizontal line \n      doc.text(`Total Amount Due: P${details.total_amount_to_pay.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}`, 28, 46);\n      doc.text(`Current Balance Due: P${details.current_balance.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}`, 23, 50);\n      doc.text(`Amount Paid: P${details.amount_paid.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}`, 37, 54);\n      doc.line(15, 56, 100, 56); // horizontal line \n      doc.text(`New Balance Due: P${details.new_balance.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}`, 29, 60);\n\n      doc.autoPrint();\n      window.open(doc.output('bloburl'), '_blank');\n\n   }\n\n\n\n      const columns = [\n         {\n            title: <Text strong>Date Paid</Text>,\n            dataIndex: 'date_paid',\n            render: (text, record) => {\n               return moment(record.date_paid).format('MMMM DD, YYYY');\n            }\n         },\n         {\n            title: <Text strong>Amount Paid</Text>,\n            dataIndex: 'amount_paid',\n            render: (text, record) => {\n               return '₱' + record.amount_paid.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            }\n         },\n         {\n            title: <Text strong>Current Balance</Text>,\n            dataIndex: 'current_balance_before',\n            render: (text, record) => {\n               return '₱' + record.current_balance_before.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            }\n         },\n         {\n            title: <Text strong>New Balance</Text>,\n            dataIndex: 'new_balance_after',\n            render: (text, record) => {\n               return record.new_balance_after === 0 ? 'Fully Paid' : '₱' + record.new_balance_after.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            }\n         },\n         {\n            title: <Text strong>Received By</Text>,\n            dataIndex: 'received_by',\n            render: (text, record) => {\n               return record.received_by;\n            }\n         },\n         {\n            title: <Text strong>Actions</Text>,\n            dataIndex: 'actions',\n            render: (text, record) => {\n               return <Button\n                  onClick={() => handlePrintPaymentReceipt(\n                     {\n                        id: props.treatment.id,\n                        date_paid: record.date_paid,\n                        payment_type: props.treatment.payment_type,\n                        description: props.treatment.description,\n                        total_amount_to_pay: props.treatment.total_amount_to_pay,\n                        current_balance: record.current_balance_before,\n                        amount_paid: record.amount_paid,\n                        new_balance: record.new_balance_after\n                     }\n                  )}\n               >\n                  <PrinterFilled />Print Receipt</Button>\n            }\n         }\n      ];\n\n\n      return (\n         <React.Fragment>\n            <a onClick={showModal} target=\"_blank\" rel=\"noopener noreferrer\">View Installment Payment Transactions</a>\n            <Modal\n               title=\"Installment Payment Transactions\"\n               visible={state.visible}\n               okButtonProps={{ style: { display: 'none' } }}\n               cancelText={<React.Fragment><CloseCircleFilled />Close</React.Fragment>}\n               onCancel={hideModal}\n               width={650}\n            >\n               <Table\n                  bordered\n                  loading={state.loading}\n                  dataSource={state.paymentTransactions}\n                  size=\"small\"\n                  columns={columns}\n                  scroll={{ x: 300 }}\n                  rowKey={(record) => record.id}\n                  pagination={\n                     {\n                        showSizeChanger: true,\n                        showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} payments history`,\n                        defaultCurrent: 1,\n                        pageSize: 5,\n                        onChange: (page, pageSize) => {\n\n                        }\n                     }\n                  }\n               />\n            </Modal>\n         </React.Fragment>\n      );\n   \n}\n\n\n\n\nexport default InstallmentPaymentsHistoryModal;","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\treatment\\DMFTPopover.js",[],"C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\payments\\AddTreatmentModal.js",["287"],"import React, { useState } from 'react';\nimport { Modal, Form, Input, InputNumber, Row, Col, DatePicker, Select, Button, Radio } from 'antd';\nimport axios from 'axios';\nimport moment from 'moment';\nimport { PlusCircleFilled } from '@ant-design/icons';\n\nfunction AddTreatmentModal(props) {\n   const [form] = Form.useForm();\n\n   const [state, setState] = useState({\n      visible: false,\n      treatedBySelectOptions: [],\n      paymentType: ''\n   });\n\n\n\n   // componentDidMount() {\n   //    axios.get('users/admins')\n   //       .then((response) => {\n   //          if (response.status === 200)\n   //             setState({ treatedBySelectOptions: response.data.users });\n   //       })\n   //       .catch((err) => {\n   //          console.log(err);\n   //       });\n   // }\n\n   const handleSubmit = (e) => {\n      e.preventDefault();\n      props.form.validateFields((err, values) => {\n         if (err)\n            return\n         props.onAdd(values);\n         hideModal();\n      });\n   }\n\n   const handlePaymentTypeChange = (e) => {\n      setState({ paymentType: e.target.value });\n   }\n\n   const checkTotalAmount = (rule, value, callback) => {\n      const { form } = props;\n      const totalAmountToPay = form.getFieldValue('total_amount_to_pay');\n      if ((value > totalAmountToPay) || (value < 1 && totalAmountToPay))\n         callback('Not lower or greater than Total Amount to pay');\n      else\n         callback();\n   }\n\n   const showModal = () => {\n      setState({ visible: true });\n   }\n\n   const hideModal = () => {\n      setState({ visible: false, totalAmountToPay: '', paymentType: '' });\n      form.resetFields();\n   }\n\n\n   return (\n      <React.Fragment>\n         <Button onClick={showModal} type=\"primary\"><PlusCircleFilled />Add New Treatment</Button>\n         <Modal\n            visible={state.visible}\n            title=\"Add New Treatment\"\n            okText=\"Add\"\n            onCancel={hideModal}\n            onOk={handleSubmit}\n         >\n            <Form layout=\"vertical\" onSubmit={handleSubmit} form={form}>\n\n               <Row gutter={8}>\n                  <Col span={24}>\n                     <Form.Item label=\"Description\" name=\"description\" rules={[{ required: true, message: 'Description is required.' }]}>\n\n                        <Input />\n\n                     </Form.Item>\n                  </Col>\n                  <Col span={12}>\n                     <Form.Item label=\"Tooth Affected No.\" name=\"tooth_affected_no\" initialValue='' >\n\n                        <Select>\n                           <Select.Option value=''>N/A</Select.Option>\n                           <Select.OptGroup label=\"Adult Teeth\">\n                              <Select.Option value=\"LR_32\">LR_32</Select.Option>\n                              <Select.Option value=\"LR_31\">LR_31</Select.Option>\n                              <Select.Option value=\"LR_30\">LR_30</Select.Option>\n                              <Select.Option value=\"LR_29\">LR_29</Select.Option>\n                              <Select.Option value=\"LR_28\">LR_28</Select.Option>\n                              <Select.Option value=\"LR_27\">LR_27</Select.Option>\n                              <Select.Option value=\"LR_26\">LR_26</Select.Option>\n                              <Select.Option value=\"LR_25\">LR_25</Select.Option>\n                              <Select.Option value=\"LL_24\">LL_24</Select.Option>\n                              <Select.Option value=\"LL_23\">LL_23</Select.Option>\n                              <Select.Option value=\"LL_22\">LL_22</Select.Option>\n                              <Select.Option value=\"LL_21\">LL_21</Select.Option>\n                              <Select.Option value=\"LL_20\">LL_20</Select.Option>\n                              <Select.Option value=\"LL_19\">LL_19</Select.Option>\n                              <Select.Option value=\"LL_18\">LL_18</Select.Option>\n                              <Select.Option value=\"LL_17\">LL_17</Select.Option>\n                              <Select.Option value=\"UL_16\">UL_16</Select.Option>\n                              <Select.Option value=\"UL_15\">UL_15</Select.Option>\n                              <Select.Option value=\"UL_14\">UL_14</Select.Option>\n                              <Select.Option value=\"UL_13\">UL_13</Select.Option>\n                              <Select.Option value=\"UL_12\">UL_12</Select.Option>\n                              <Select.Option value=\"UL_11\">UL_11</Select.Option>\n                              <Select.Option value=\"UL_10\">UL_10</Select.Option>\n                              <Select.Option value=\"UL_9\">UL_9</Select.Option>\n                              <Select.Option value=\"UR_8\">UR_8</Select.Option>\n                              <Select.Option value=\"UR_7\">UR_7</Select.Option>\n                              <Select.Option value=\"UR_6\">UR_6</Select.Option>\n                              <Select.Option value=\"UR_5\">UR_5</Select.Option>\n                              <Select.Option value=\"UR_4\">UR_4</Select.Option>\n                              <Select.Option value=\"UR_3\">UR_3</Select.Option>\n                              <Select.Option value=\"UR_2\">UR_2</Select.Option>\n                              <Select.Option value=\"UR_1\">UR_1</Select.Option>\n                           </Select.OptGroup>\n                           <Select.OptGroup label=\"Child Teeth\">\n                              <Select.Option value=\"LR_T\">LR_T</Select.Option>\n                              <Select.Option value=\"LR_S\">LR_S</Select.Option>\n                              <Select.Option value=\"LR_R\">LR_R</Select.Option>\n                              <Select.Option value=\"LR_Q\">LR_Q</Select.Option>\n                              <Select.Option value=\"LR_P\">LR_P</Select.Option>\n                              <Select.Option value=\"LL_O\">LL_O</Select.Option>\n                              <Select.Option value=\"LL_N\">LL_N</Select.Option>\n                              <Select.Option value=\"LL_M\">LL_M</Select.Option>\n                              <Select.Option value=\"LL_L\">LL_L</Select.Option>\n                              <Select.Option value=\"LL_K\">LL_K</Select.Option>\n                              <Select.Option value=\"UL_J\">UL_J</Select.Option>\n                              <Select.Option value=\"UL_I\">UL_I</Select.Option>\n                              <Select.Option value=\"UL_H\">UL_H</Select.Option>\n                              <Select.Option value=\"UL_G\">UL_G</Select.Option>\n                              <Select.Option value=\"UL_F\">UL_F</Select.Option>\n                              <Select.Option value=\"UR_E\">UR_E</Select.Option>\n                              <Select.Option value=\"UR_D\">UR_D</Select.Option>\n                              <Select.Option value=\"UR_C\">UR_C</Select.Option>\n                              <Select.Option value=\"UR_B\">UR_B</Select.Option>\n                              <Select.Option value=\"UR_A\">UR_A</Select.Option>\n                           </Select.OptGroup>\n                        </Select>\n\n                     </Form.Item>\n                  </Col>\n                  <Col span={12}>\n                     <Form.Item label=\"Date Treated\" name=\"date_treated\" rules={[{ required: true, message: 'Date Treated is required.' }]}>\n\n                        <DatePicker disabledDate={(current) => current && current > moment()} format=\"MMMM DD, YYYY\" style={{ width: '100%' }} />\n\n                     </Form.Item>\n                  </Col>\n                  <Col span={12}>\n                     <Form.Item label=\"Treated By\" name=\"user_id\" rules={[{ required: true, message: 'Treated By is required.' }]}>\n\n                        <Select>\n                           {\n                              state.treatedBySelectOptions.map((user) => {\n                                 return <Select.Option key={user.id} value={user.id}>{user.name}</Select.Option>\n                              })\n                           }\n\n                        </Select>\n\n                     </Form.Item>\n                  </Col>\n                  <Col span={24}>\n                     <Form.Item label=\"Payment Type\" name=\"payment_type\" rules={[{ required: true, message: 'Payment Type is required.' }]}>\n\n                        <Radio.Group onChange={handlePaymentTypeChange}>\n                           <Radio value=\"in-full\">In-full</Radio>\n                           <Radio value=\"installment\">Installment</Radio>\n                           <Radio value=\"no-charge\">No Charge</Radio>\n                        </Radio.Group>\n\n                     </Form.Item>\n                  </Col>\n\n                  {\n                     state.paymentType === 'in-full' ? (\n                        <Col span={24}>\n                           <Form.Item label=\"Total Amount To Pay\" name=\"total_amount_to_pay\" rules={[{ required: true, message: 'Total Amount To Pay is required.' }]}>\n\n                              <InputNumber min={1} style={{ width: '100%' }} />\n\n                           </Form.Item>\n                        </Col>)\n                        : state.paymentType === 'installment' ? (\n                           <React.Fragment>\n                              <Col span={12}>\n                                 <Form.Item label=\"Total Amount To Pay\" name=\"total_amount_to_pay\" rules={[{ required: true, message: 'Total Amount To Pay is required.' }]}>\n\n                                    <InputNumber style={{ width: '100%' }} min={1} />\n\n                                 </Form.Item>\n                              </Col>\n                              <Col span={12}>\n                                 <Form.Item label=\"Initial Payment\" name=\"amount_paid\" rules={[{ required: true, message: 'Initial Paymentis required.' }, { validator: checkTotalAmount }]}>\n\n                                    <InputNumber style={{ width: '100%' }} />\n\n                                 </Form.Item>\n                              </Col>\n                           </React.Fragment>) : null\n                  }\n\n\n               </Row>\n               <Button hidden htmlType=\"submit\"></Button>\n            </Form>\n         </Modal>\n      </React.Fragment>\n   );\n\n}\n\nexport default AddTreatmentModal;","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\treatment\\TreatmentsPopoverDrawer.js",[],"C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\pages\\Login.js",["288"],"C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\register\\ForgotPasswordModal.js",["289","290","291"],"import React, { useState } from 'react';\nimport { Modal, Form, Input, Row, Col, Alert, Tooltip, message, notification } from 'antd';\nimport axios from 'axios';\n\n\nfunction ForgotPasswordModal(props) {\n   const [form] = Form.useForm();\n\n   const [state, setState] = useState({\n      visible: false,\n      sending: false\n   });\n\n\n   const handleSubmit = (e) => {\n      e.preventDefault();\n      props.form.validateFields((err, values) => {\n         if (err)\n            return;\n         setState({ sending: true });\n\n         axios.post(`users/forgotPassword`, values)\n\n            .then((response) => {\n               if (response.status === 200) {\n                  hideModal();\n                  notification['info']({\n                     message: 'Reset Password Link Sent!',\n                     description: 'A password link reset has been sent to your email. Kindly check your email inbox',\n                     duration: 5\n                  });\n               }\n            })\n            .catch((err) => {\n               console.log(err);\n               message.error('Internal server error!');\n            });\n      });\n   }\n\n\n   const showModal = () => {\n      setState({ visible: true });\n   }\n\n   const hideModal = () => {\n      form.resetFields();\n      setState({ visible: false, sending: false });\n   }\n\n   const compareToFirstPassword = (rule, value, callback) => {\n      const form = props.form;\n      if (value && value !== form.getFieldValue('password')) {\n         callback('Two passwords that you enter is inconsistent!');\n      }\n      else if (form.getFieldValue('password') && !value) {\n         callback('Please confirm your password');\n      }\n      else {\n         callback();\n      }\n   }\n\n\n   const validateToNextPassword = (rule, value, callback) => {\n      // const form = props.form;\n      // if (value) {\n      // //   form.validateFields(['confirm_password'], { force: true });\n      // }\n      callback();\n   }\n\n\n   return (\n      <React.Fragment>\n         <a disabled={props.disabled} onClick={showModal} target=\"_blank\" rel=\"noopener noreferrer\">Forgot Password?</a>\n         <Modal\n            visible={state.visible}\n            title=\"Reset Your Password\"\n            okText=\"Send Reset Password Link\"\n            onCancel={hideModal}\n            onOk={handleSubmit}\n            okButtonProps={{ loading: state.sending }}\n            style={{ top: 40 }}\n         >\n            {\n\n               <Alert stylx={{ marginBottom: 11 }} type=\"info\" showIcon message=\"A reset password link will be sent to your email address to reset your password using the provided new password.\" />\n\n            }\n            <Form style={{ marginTop: 11 }} layout=\"vertical\" form={form}>\n\n               <Row>\n\n                  <Col span={24}>\n\n                     <Form.Item label=\"Email Address\" name=\"emailaddress\" rules={[{ required: true, message: 'Email Address is required' }]}>\n                        <Tooltip title=\"Email Address used when you registered your account.\">\n\n                           <Input />\n\n                        </Tooltip>\n                     </Form.Item>\n\n                  </Col>\n                  <Col span={24}>\n                     <Form.Item label=\"New Password\" name=\"password\" rules={[{ required: true, message: 'New password  is required' }]}>\n\n                        <Input.Password />\n\n                     </Form.Item>\n                  </Col>\n                  <Col span={24}>\n                     <Form.Item label=\"Confirm New Password\" name=\"confirm_password\" rules={[{ required: true, message: 'Confirm your new password' }]}>\n\n                        <Input.Password />\n\n                     </Form.Item>\n                  </Col>\n\n               </Row>\n            </Form>\n         </Modal>\n      </React.Fragment>\n   );\n\n}\n\n\nexport default ForgotPasswordModal;","C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\DentalRecord\\DescriptionItem.js",[],"C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\DentalRecord\\UpdatePersonalInfoModal.js",[],"C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\components\\SpinningComponent.js",[],"C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\redux\\index.js",[],"C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\redux\\user\\userActions.js",[],"C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\redux\\user\\userTypes.js",[],"C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\redux\\store.js",[],"C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\redux\\rootReducer.js",[],"C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\redux\\user\\userReducer.js",[],"C:\\Users\\alhassn alshreaf\\Desktop\\clinc\\clinic\\frontend\\src\\hocs\\Layout.js",["292","293","294"],{"ruleId":"295","replacedBy":"296"},{"ruleId":"297","replacedBy":"298"},{"ruleId":"299","severity":1,"message":"300","line":6,"column":8,"nodeType":"301","messageId":"302","endLine":6,"endColumn":37},{"ruleId":"299","severity":1,"message":"303","line":7,"column":8,"nodeType":"301","messageId":"302","endLine":7,"endColumn":28},{"ruleId":"299","severity":1,"message":"304","line":45,"column":10,"nodeType":"301","messageId":"302","endLine":45,"endColumn":23},{"ruleId":"299","severity":1,"message":"305","line":88,"column":10,"nodeType":"301","messageId":"302","endLine":88,"endColumn":33},{"ruleId":"299","severity":1,"message":"306","line":2,"column":52,"nodeType":"301","messageId":"302","endLine":2,"endColumn":60},{"ruleId":"299","severity":1,"message":"307","line":3,"column":8,"nodeType":"301","messageId":"302","endLine":3,"endColumn":13},{"ruleId":"299","severity":1,"message":"308","line":5,"column":10,"nodeType":"301","messageId":"302","endLine":5,"endColumn":27},{"ruleId":"299","severity":1,"message":"309","line":16,"column":18,"nodeType":"301","messageId":"302","endLine":16,"endColumn":26},{"ruleId":"299","severity":1,"message":"310","line":21,"column":10,"nodeType":"301","messageId":"302","endLine":21,"endColumn":24},{"ruleId":"311","severity":1,"message":"312","line":83,"column":4,"nodeType":"313","messageId":"314","endLine":83,"endColumn":64},{"ruleId":"315","severity":1,"message":"316","line":13,"column":4,"nodeType":"317","messageId":"318","endLine":38,"endColumn":5},{"ruleId":"315","severity":1,"message":"316","line":42,"column":4,"nodeType":"317","messageId":"318","endLine":57,"endColumn":5},{"ruleId":"299","severity":1,"message":"319","line":3,"column":4,"nodeType":"301","messageId":"302","endLine":3,"endColumn":11},{"ruleId":"299","severity":1,"message":"320","line":3,"column":64,"nodeType":"301","messageId":"302","endLine":3,"endColumn":71},{"ruleId":"299","severity":1,"message":"321","line":40,"column":10,"nodeType":"301","messageId":"302","endLine":40,"endColumn":24},{"ruleId":"322","severity":1,"message":"323","line":75,"column":10,"nodeType":"324","endLine":75,"endColumn":76},{"ruleId":"325","severity":1,"message":"326","line":67,"column":63,"nodeType":"327","messageId":"328","endLine":67,"endColumn":65},{"ruleId":"325","severity":1,"message":"326","line":67,"column":85,"nodeType":"327","messageId":"328","endLine":67,"endColumn":87},{"ruleId":"299","severity":1,"message":"329","line":128,"column":10,"nodeType":"301","messageId":"302","endLine":128,"endColumn":21},{"ruleId":"299","severity":1,"message":"330","line":132,"column":10,"nodeType":"301","messageId":"302","endLine":132,"endColumn":36},{"ruleId":"322","severity":1,"message":"323","line":192,"column":22,"nodeType":"324","endLine":201,"endColumn":68},{"ruleId":"322","severity":1,"message":"323","line":207,"column":27,"nodeType":"324","endLine":209,"endColumn":70},{"ruleId":"322","severity":1,"message":"323","line":230,"column":39,"nodeType":"324","endLine":232,"endColumn":82},{"ruleId":"299","severity":1,"message":"331","line":25,"column":13,"nodeType":"301","messageId":"302","endLine":25,"endColumn":30},{"ruleId":"299","severity":1,"message":"332","line":1,"column":15,"nodeType":"301","messageId":"302","endLine":1,"endColumn":23},{"ruleId":"299","severity":1,"message":"333","line":20,"column":10,"nodeType":"301","messageId":"302","endLine":20,"endColumn":32},{"ruleId":"334","severity":1,"message":"335","line":25,"column":26,"nodeType":"336","messageId":"337","endLine":25,"endColumn":27,"suggestions":"338"},{"ruleId":"334","severity":1,"message":"335","line":25,"column":51,"nodeType":"336","messageId":"337","endLine":25,"endColumn":52,"suggestions":"339"},{"ruleId":"299","severity":1,"message":"340","line":30,"column":13,"nodeType":"301","messageId":"302","endLine":30,"endColumn":17},{"ruleId":"299","severity":1,"message":"341","line":60,"column":13,"nodeType":"301","messageId":"302","endLine":60,"endColumn":23},{"ruleId":"299","severity":1,"message":"342","line":2,"column":26,"nodeType":"301","messageId":"302","endLine":2,"endColumn":30},{"ruleId":"299","severity":1,"message":"343","line":15,"column":11,"nodeType":"301","messageId":"302","endLine":15,"endColumn":16},{"ruleId":"299","severity":1,"message":"309","line":15,"column":18,"nodeType":"301","messageId":"302","endLine":15,"endColumn":26},{"ruleId":"299","severity":1,"message":"310","line":23,"column":10,"nodeType":"301","messageId":"302","endLine":23,"endColumn":24},{"ruleId":"299","severity":1,"message":"344","line":36,"column":10,"nodeType":"301","messageId":"302","endLine":36,"endColumn":22},{"ruleId":"299","severity":1,"message":"340","line":12,"column":11,"nodeType":"301","messageId":"302","endLine":12,"endColumn":15},{"ruleId":"299","severity":1,"message":"345","line":40,"column":10,"nodeType":"301","messageId":"302","endLine":40,"endColumn":27},{"ruleId":"322","severity":1,"message":"323","line":270,"column":28,"nodeType":"324","endLine":270,"endColumn":123},{"ruleId":"322","severity":1,"message":"323","line":275,"column":34,"nodeType":"324","endLine":275,"endColumn":128},{"ruleId":"322","severity":1,"message":"323","line":312,"column":28,"nodeType":"324","endLine":312,"endColumn":122},{"ruleId":"322","severity":1,"message":"323","line":316,"column":28,"nodeType":"324","endLine":316,"endColumn":133},{"ruleId":"299","severity":1,"message":"346","line":7,"column":9,"nodeType":"301","messageId":"302","endLine":7,"endColumn":15},{"ruleId":"299","severity":1,"message":"347","line":36,"column":10,"nodeType":"301","messageId":"302","endLine":36,"endColumn":28},{"ruleId":"325","severity":1,"message":"326","line":91,"column":63,"nodeType":"327","messageId":"328","endLine":91,"endColumn":65},{"ruleId":"325","severity":1,"message":"326","line":91,"column":85,"nodeType":"327","messageId":"328","endLine":91,"endColumn":87},{"ruleId":"322","severity":1,"message":"323","line":46,"column":10,"nodeType":"324","endLine":46,"endColumn":101},{"ruleId":"299","severity":1,"message":"348","line":26,"column":10,"nodeType":"301","messageId":"302","endLine":26,"endColumn":28},{"ruleId":"299","severity":1,"message":"349","line":33,"column":10,"nodeType":"301","messageId":"302","endLine":33,"endColumn":31},{"ruleId":"322","severity":1,"message":"323","line":51,"column":22,"nodeType":"324","endLine":51,"endColumn":46},{"ruleId":"299","severity":1,"message":"350","line":35,"column":10,"nodeType":"301","messageId":"302","endLine":35,"endColumn":22},{"ruleId":"322","severity":1,"message":"323","line":46,"column":10,"nodeType":"324","endLine":46,"endColumn":101},{"ruleId":"322","severity":1,"message":"323","line":159,"column":13,"nodeType":"324","endLine":159,"endColumn":78},{"ruleId":"299","severity":1,"message":"307","line":3,"column":8,"nodeType":"301","messageId":"302","endLine":3,"endColumn":13},{"ruleId":"351","severity":1,"message":"352","line":29,"column":7,"nodeType":"353","endLine":29,"endColumn":9,"suggestions":"354"},{"ruleId":"299","severity":1,"message":"333","line":51,"column":10,"nodeType":"301","messageId":"302","endLine":51,"endColumn":32},{"ruleId":"299","severity":1,"message":"355","line":65,"column":10,"nodeType":"301","messageId":"302","endLine":65,"endColumn":32},{"ruleId":"322","severity":1,"message":"323","line":76,"column":10,"nodeType":"324","endLine":76,"endColumn":101},{"ruleId":"351","severity":1,"message":"356","line":27,"column":6,"nodeType":"353","endLine":27,"endColumn":8,"suggestions":"357"},{"ruleId":"358","severity":1,"message":"359","line":45,"column":11,"nodeType":"324","endLine":45,"endColumn":74},{"ruleId":"322","severity":1,"message":"360","line":68,"column":17,"nodeType":"324","endLine":68,"endColumn":59},"no-native-reassign",["361"],"no-negated-in-lhs",["362"],"no-unused-vars","'PatientCreateAppointmentModal' is defined but never used.","Identifier","unusedVar","'AppointmentsCalendar' is defined but never used.","'getMyBalances' is assigned a value but never used.","'handleCreateAppointment' is assigned a value but never used.","'Skeleton' is defined but never used.","'axios' is defined but never used.","'LineChartOutlined' is defined but never used.","'setState' is assigned a value but never used.","'getUserAccount' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'Tooltip' is defined but never used.","'message' is defined but never used.","'handleRegister' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'hidePopover' is assigned a value but never used.","'handleVisiblePopoverChange' is assigned a value but never used.","'componentDidMount' is assigned a value but never used.","'useState' is defined but never used.","'compareToFirstPassword' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["363","364"],["365","366"],"'form' is assigned a value but never used.","'roleSelect' is assigned a value but never used.","'Icon' is defined but never used.","'state' is assigned a value but never used.","'handleUpdate' is assigned a value but never used.","'handleConfirmBlur' is assigned a value but never used.","'Option' is assigned a value but never used.","'handleSearchChange' is assigned a value but never used.","'showChildrenDrawer' is assigned a value but never used.","'onChildrenDrawerClose' is assigned a value but never used.","'checkBalance' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.location.state'. Either include it or remove the dependency array.","ArrayExpression",["367"],"'validateToNextPassword' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["368"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation",{"messageId":"369","fix":"370","desc":"371"},{"messageId":"372","fix":"373","desc":"374"},{"messageId":"369","fix":"375","desc":"371"},{"messageId":"372","fix":"376","desc":"374"},{"desc":"377","fix":"378"},{"desc":"379","fix":"380"},"removeEscape",{"range":"381","text":"382"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"383","text":"384"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"385","text":"382"},{"range":"386","text":"384"},"Update the dependencies array to be: [props.location.state]",{"range":"387","text":"388"},"Update the dependencies array to be: [props]",{"range":"389","text":"390"},[592,593],"",[592,592],"\\",[617,618],[617,617],[1158,1160],"[props.location.state]",[709,711],"[props]"]